<channel version="3.2.1">
  <id>21355026-a87e-4e1d-9586-cdf6d0075b9b</id>
  <nextMetaDataId>12</nextMetaDataId>
  <name>Update Events last</name>
  <description>This channel will attempt to read the submissions from ODK in a dependency aware way. Though XForms has no notion of dependency, there is an inherit dependency betweens update forms. The dependenc looks like:&#xd;
Update Events -&gt; Visit -&gt; Location&#xd;
where all update events depend on a visit, and a visit might potentially depend on a location therefore, forms are processed in this order:&#xd;
Location, Visit, Update Events&#xd;
&#xd;
Moreover, the entry point of searching is Visit, since one is always created, whether a new location or not. Then a check is made to see if a Location was created during the visit. After that check, all update forms are checked. In the end, a list will be in order of:&#xd;
Location - Optional, only if the visit is at a new locattion not already registered&#xd;
Visit &#xd;
Any events...</description>
  <enabled>true</enabled>
  <lastModified>
    <time>1428504343230</time>
    <timezone>Europe/Berlin</timezone>
  </lastModified>
  <revision>6</revision>
  <sourceConnector version="3.2.1">
    <metaDataId>0</metaDataId>
    <name>sourceConnector</name>
    <properties class="com.mirth.connect.connectors.js.JavaScriptReceiverProperties" version="3.2.1">
      <pluginProperties/>
      <pollConnectorProperties version="3.2.1">
        <pollingType>interval</pollingType>
        <pollingHour>0</pollingHour>
        <pollingMinute>0</pollingMinute>
        <pollingFrequency>500</pollingFrequency>
      </pollConnectorProperties>
      <sourceConnectorProperties version="3.2.1">
        <responseVariable>None</responseVariable>
        <respondAfterProcessing>true</respondAfterProcessing>
        <processBatch>false</processBatch>
        <firstResponse>false</firstResponse>
        <resourceIds class="linked-hash-set">
          <string>Default Resource</string>
        </resourceIds>
      </sourceConnectorProperties>
      <script>var forms = new java.util.ArrayList()

var dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;com.mysql.jdbc.Driver&apos;, globalMap.get(&quot;ODK_DATABASE_URL&quot;), globalMap.get(&quot;ODK_DATABASE_USER&quot;), globalMap.get(&quot;ODK_DATABASE_PASSWORD&quot;));

var checkUpdate = dbConn.executeCachedQuery(&quot;SELECT FLG_SCENARIO FROM &quot; + globalMap.get(&quot;SCENARIO_TABLE&quot;) + &quot; WHERE FLG_SCENARIO=1&quot;);

if (!checkUpdate.next()) {
  dbConn.close();
  return forms;
}

var visitResult = dbConn.executeCachedQuery(&quot;SELECT DISTINCT VISIT_DATE, VISIT_ID, LOCATION_ID, FIELD_WORKER_ID, ROUND_NUMBER FROM &quot; + globalMap.get(&quot;VISIT_TABLE&quot;) + &quot; WHERE processed_by_mirth=0 order by START ASC&quot;);

while(visitResult.next()) {
  var visitXml = resultSetToXml(visitResult, &quot;&lt;visit event=&apos;visit&apos; table-name=&apos;&quot; + globalMap.get(&quot;VISIT_TABLE&quot;) + &quot;&apos;/&gt;&quot;);
  // does this visit depend on a newly created location ?
  // a visit will not be processed correctly if the location it refers to does not yet exist
  var location = dbConn.executeCachedQuery(&quot;SELECT _URI, HIERARCHY_ID, LOCATION_ID, FIELD_WORKER_ID, LOCATION_TYPE, LOCATION_NAME, GEOPOINT_ACC ACCURACY, GEOPOINT_ALT ALTITUDE, GEOPOINT_LNG LONGITUDE, GEOPOINT_LAT LATITUDE FROM &quot; + globalMap.get(&quot;LOCATION_TABLE&quot;) + &quot; WHERE LOCATION_ID = &apos;&quot; + visitXml[&apos;location_id&apos;].toString() + &quot;&apos; AND processed_by_mirth =0&quot;);
  
  if (location.next()) {
    var loc = resultSetToXml(location, &quot;&lt;location event=&apos;location&apos; table-name=&apos;&quot; + globalMap.get(&quot;LOCATION_TABLE&quot;) + &quot;&apos;/&gt;&quot;);
    forms.add(loc.toString());
  }

  forms.add(visitXml.toString());
  
  var visitId = visitXml[&quot;visit_id&quot;].toString();

  forms.addAll(addDeaths(visitId, dbConn));
  forms.addAll(addOutMigrations(visitId, dbConn));
  forms.addAll(addOutMigrationsIM(visitId, dbConn));
  forms.addAll(addInternalInmigrations(visitId, dbConn));
  forms.addAll(addExternalInmigrations(visitId, dbConn));
  forms.addAll(addPregnancyOutcomes(visitId, dbConn));
  forms.addAll(addPregnancyObs(visitId, dbConn));
  forms.addAll(addHoHDeaths(visitId, dbConn));
}


dbConn.close();
// You may access this result below with $(&apos;column_name&apos;)
return forms;</script>
    </properties>
    <transformer version="3.2.1">
      <steps/>
      <inboundTemplate encoding="base64">PGxvY2F0aW9uIGV2ZW50PSJsb2NhdGlvbiIgdGFibGUtbmFtZT0ibG9jYXRpb25fcmVnaXN0cmF0
aW9uX2NvcmUiPgogICAgPF91cmk+PC9fdXJpPgogICAgPGhpZXJhcmNoeV9pZD48L2hpZXJhcmNo
eV9pZD4KICAgIDxsb2NhdGlvbl9pZD48L2xvY2F0aW9uX2lkPgogICAgPGZpZWxkX3dvcmtlcl9p
ZD48L2ZpZWxkX3dvcmtlcl9pZD4KICAgIDxsb2NhdGlvbl90eXBlPjwvbG9jYXRpb25fdHlwZT4K
ICAgIDxsb2NhdGlvbl9uYW1lPjwvbG9jYXRpb25fbmFtZT4KICAgIDxhY2N1cmFjeT48L2FjY3Vy
YWN5PgogICAgPGFsdGl0dWRlPjwvYWx0aXR1ZGU+CiAgICA8bG9uZ2l0dWRlPjwvbG9uZ2l0dWRl
PgogICAgPGxhdGl0dWRlPjwvbGF0aXR1ZGU+CjwvbG9jYXRpb24+</inboundTemplate>
      <outboundTemplate encoding="base64"></outboundTemplate>
      <inboundDataType>XML</inboundDataType>
      <outboundDataType>XML</outboundDataType>
      <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.2.1">
        <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.2.1">
          <stripNamespaces>true</stripNamespaces>
        </serializationProperties>
        <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.2.1">
          <splitType>Element_Name</splitType>
          <elementName></elementName>
          <level>1</level>
          <query></query>
          <batchScript></batchScript>
        </batchProperties>
      </inboundProperties>
      <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.2.1">
        <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.2.1">
          <stripNamespaces>true</stripNamespaces>
        </serializationProperties>
        <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.2.1">
          <splitType>Element_Name</splitType>
          <elementName></elementName>
          <level>1</level>
          <query></query>
          <batchScript></batchScript>
        </batchProperties>
      </outboundProperties>
    </transformer>
    <filter version="3.2.1">
      <rules/>
    </filter>
    <transportName>JavaScript Reader</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <waitForPrevious>true</waitForPrevious>
  </sourceConnector>
  <destinationConnectors>
    <connector version="3.2.1">
      <metaDataId>1</metaDataId>
      <name>Location </name>
      <properties class="com.mirth.connect.connectors.http.HttpDispatcherProperties" version="3.2.1">
        <pluginProperties/>
        <destinationConnectorProperties version="3.2.1">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-set">
            <string>Default Resource</string>
          </resourceIds>
        </destinationConnectorProperties>
        <host>${OPENHDS_PATH}/locations</host>
        <useProxyServer>false</useProxyServer>
        <proxyAddress></proxyAddress>
        <proxyPort></proxyPort>
        <method>post</method>
        <headers class="linked-hash-map"/>
        <parameters class="linked-hash-map"/>
        <responseXmlBody>false</responseXmlBody>
        <responseParseMultipart>true</responseParseMultipart>
        <responseIncludeMetadata>false</responseIncludeMetadata>
        <responseBinaryMimeTypes></responseBinaryMimeTypes>
        <responseBinaryMimeTypesRegex>false</responseBinaryMimeTypesRegex>
        <multipart>false</multipart>
        <useAuthentication>true</useAuthentication>
        <authenticationType>Basic</authenticationType>
        <usePreemptiveAuthentication>true</usePreemptiveAuthentication>
        <username>${OPENHDS_USER}</username>
        <password>${OPENHDS_PASSWORD}</password>
        <content>${message.transformedData}</content>
        <contentType>application/xml</contentType>
        <dataTypeBinary>false</dataTypeBinary>
        <charset>UTF-8</charset>
        <socketTimeout>30000</socketTimeout>
      </properties>
      <transformer version="3.2.1">
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>collectedBy - extId (out)</name>
            <script>tmp[&apos;collectedBy&apos;][&apos;extId&apos;] = validate(msg[&apos;field_worker_id&apos;].toString().toUpperCase(), &apos;&apos;, new Array());</script>
            <type>Message Builder</type>
            <data>
              <entry>
                <string>Variable</string>
                <string>tmp[&apos;collectedBy&apos;][&apos;extId&apos;]</string>
              </entry>
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;field_worker_id&apos;].toString().toUpperCase()</string>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>1</sequenceNumber>
            <name>locationLevel - extId (out)</name>
            <script>tmp[&apos;locationLevel&apos;][&apos;extId&apos;] = validate(msg[&apos;hierarchy_id&apos;].toString().toUpperCase(), &apos;&apos;, new Array());</script>
            <type>Message Builder</type>
            <data>
              <entry>
                <string>Variable</string>
                <string>tmp[&apos;locationLevel&apos;][&apos;extId&apos;]</string>
              </entry>
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;hierarchy_id&apos;].toString().toUpperCase()</string>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>2</sequenceNumber>
            <name>locationName (out)</name>
            <script>tmp[&apos;locationName&apos;] = validate(msg[&apos;location_name&apos;].toString().toUpperCase(), &apos;&apos;, new Array());</script>
            <type>Message Builder</type>
            <data>
              <entry>
                <string>Variable</string>
                <string>tmp[&apos;locationName&apos;]</string>
              </entry>
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;location_name&apos;].toString().toUpperCase()</string>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>3</sequenceNumber>
            <name>locationType (out)</name>
            <script>tmp[&apos;locationType&apos;] = validate(msg[&apos;location_type&apos;].toString().toUpperCase(), &apos;&apos;, new Array());</script>
            <type>Message Builder</type>
            <data>
              <entry>
                <string>Variable</string>
                <string>tmp[&apos;locationType&apos;]</string>
              </entry>
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;location_type&apos;].toString().toUpperCase()</string>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>4</sequenceNumber>
            <name>extId (out)</name>
            <script>tmp[&apos;extId&apos;] = validate(msg[&apos;location_id&apos;].toString().toUpperCase(), &apos;&apos;, new Array());</script>
            <type>Message Builder</type>
            <data>
              <entry>
                <string>Variable</string>
                <string>tmp[&apos;extId&apos;]</string>
              </entry>
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;location_id&apos;].toString().toUpperCase()</string>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>5</sequenceNumber>
            <name>accuracy (out)</name>
            <script>tmp[&apos;accuracy&apos;] = validate(msg[&apos;geopoint_acc&apos;].toString(), &apos;&apos;, new Array());</script>
            <type>Message Builder</type>
            <data>
              <entry>
                <string>Variable</string>
                <string>tmp[&apos;accuracy&apos;]</string>
              </entry>
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;geopoint_acc&apos;].toString()</string>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>6</sequenceNumber>
            <name>altitude (out)</name>
            <script>tmp[&apos;altitude&apos;] = validate(msg[&apos;geopoint_alt&apos;].toString(), &apos;&apos;, new Array());</script>
            <type>Message Builder</type>
            <data>
              <entry>
                <string>Variable</string>
                <string>tmp[&apos;altitude&apos;]</string>
              </entry>
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;geopoint_alt&apos;].toString()</string>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>7</sequenceNumber>
            <name>longitude (out)</name>
            <script>tmp[&apos;longitude&apos;] = validate(msg[&apos;geopoint_lng&apos;].toString(), &apos;&apos;, new Array());</script>
            <type>Message Builder</type>
            <data>
              <entry>
                <string>Variable</string>
                <string>tmp[&apos;longitude&apos;]</string>
              </entry>
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;geopoint_lng&apos;].toString()</string>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>8</sequenceNumber>
            <name>latitude (out)</name>
            <script>tmp[&apos;latitude&apos;] = validate(msg[&apos;geopoint_lat&apos;].toString(), &apos;&apos;, new Array());</script>
            <type>Message Builder</type>
            <data>
              <entry>
                <string>Variable</string>
                <string>tmp[&apos;latitude&apos;]</string>
              </entry>
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;geopoint_lat&apos;].toString()</string>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64">PGxvY2F0aW9uIGV2ZW50PSJsb2NhdGlvbiIgdGFibGUtbmFtZT0ibG9jYXRpb25fcmVnaXN0cmF0
aW9uX2NvcmUiPgogICAgPF91cmk+PC9fdXJpPgogICAgPGhpZXJhcmNoeV9pZD48L2hpZXJhcmNo
eV9pZD4KICAgIDxsb2NhdGlvbl9pZD48L2xvY2F0aW9uX2lkPgogICAgPGZpZWxkX3dvcmtlcl9p
ZD48L2ZpZWxkX3dvcmtlcl9pZD4KICAgIDxsb2NhdGlvbl90eXBlPjwvbG9jYXRpb25fdHlwZT4K
ICAgIDxsb2NhdGlvbl9uYW1lPjwvbG9jYXRpb25fbmFtZT4KICAgIDxnZW9wb2ludF9hY2M+PC9n
ZW9wb2ludF9hY2M+CiAgICA8Z2VvcG9pbnRfYWx0PjwvZ2VvcG9pbnRfYWx0PgogICAgPGdlb3Bv
aW50X2xuZz48L2dlb3BvaW50X2xuZz4KICAgIDxnZW9wb2ludF9sYXQ+PC9nZW9wb2ludF9sYXQ+
CjwvbG9jYXRpb24+</inboundTemplate>
        <outboundTemplate encoding="base64">PGxvY2F0aW9uPgogICAgPGV4dElkPjwvZXh0SWQ+CiAgICA8Y29sbGVjdGVkQnk+CiAgICAgICAg
PGV4dElkPjwvZXh0SWQ+CiAgICA8L2NvbGxlY3RlZEJ5PgogICAgPGxvY2F0aW9uTGV2ZWw+CiAg
ICAgICAgPGV4dElkPjwvZXh0SWQ+CiAgICA8L2xvY2F0aW9uTGV2ZWw+CiAgICA8bG9jYXRpb25O
YW1lPjwvbG9jYXRpb25OYW1lPgogICAgPGxvY2F0aW9uVHlwZT48L2xvY2F0aW9uVHlwZT4KICAg
IDxhY2N1cmFjeT48L2FjY3VyYWN5PgogICAgPGFsdGl0dWRlPjwvYWx0aXR1ZGU+CiAgICA8bG9u
Z2l0dWRlPjwvbG9uZ2l0dWRlPgogICAgPGxhdGl0dWRlPjwvbGF0aXR1ZGU+CjwvbG9jYXRpb24+
</outboundTemplate>
        <inboundDataType>XML</inboundDataType>
        <outboundDataType>XML</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.2.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.2.1">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.2.1">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.2.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.2.1">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.2.1">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.2.1">
        <steps/>
        <inboundDataType>XML</inboundDataType>
        <outboundDataType>XML</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.2.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.2.1">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.2.1">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.2.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.2.1">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.2.1">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.2.1">
        <rules>
          <rule>
            <sequenceNumber>0</sequenceNumber>
            <name>New Rule</name>
            <data>
              <entry>
                <string>Script</string>
                <string>return msg[&quot;@event&quot;].toString() === &quot;location&quot;;</string>
              </entry>
            </data>
            <type>JavaScript</type>
            <script>return msg[&quot;@event&quot;].toString() === &quot;location&quot;;</script>
            <operator>NONE</operator>
          </rule>
        </rules>
      </filter>
      <transportName>HTTP Sender</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.2.1">
      <metaDataId>2</metaDataId>
      <name>Visit</name>
      <properties class="com.mirth.connect.connectors.http.HttpDispatcherProperties" version="3.2.1">
        <pluginProperties/>
        <destinationConnectorProperties version="3.2.1">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-set">
            <string>Default Resource</string>
          </resourceIds>
        </destinationConnectorProperties>
        <host>${OPENHDS_PATH}/visits</host>
        <useProxyServer>false</useProxyServer>
        <proxyAddress></proxyAddress>
        <proxyPort></proxyPort>
        <method>post</method>
        <headers class="linked-hash-map"/>
        <parameters class="linked-hash-map"/>
        <responseXmlBody>false</responseXmlBody>
        <responseParseMultipart>true</responseParseMultipart>
        <responseIncludeMetadata>false</responseIncludeMetadata>
        <responseBinaryMimeTypes></responseBinaryMimeTypes>
        <responseBinaryMimeTypesRegex>false</responseBinaryMimeTypesRegex>
        <multipart>false</multipart>
        <useAuthentication>true</useAuthentication>
        <authenticationType>Basic</authenticationType>
        <usePreemptiveAuthentication>true</usePreemptiveAuthentication>
        <username>${OPENHDS_USER}</username>
        <password>${OPENHDS_PASSWORD}</password>
        <content>${message.transformedData}</content>
        <contentType>application/xml</contentType>
        <dataTypeBinary>false</dataTypeBinary>
        <charset>UTF-8</charset>
        <socketTimeout>30000</socketTimeout>
      </properties>
      <transformer version="3.2.1">
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>collectedBy - extId (out)</name>
            <script>tmp[&apos;collectedBy&apos;][&apos;extId&apos;] = validate(msg[&apos;field_worker_id&apos;].toString().toUpperCase(), &apos;&apos;, new Array());</script>
            <type>Message Builder</type>
            <data>
              <entry>
                <string>Variable</string>
                <string>tmp[&apos;collectedBy&apos;][&apos;extId&apos;]</string>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;field_worker_id&apos;].toString().toUpperCase()</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>1</sequenceNumber>
            <name>roundNumber (out)</name>
            <script>tmp[&apos;roundNumber&apos;] = validate(msg[&apos;round_number&apos;].toString(), &apos;&apos;, new Array());</script>
            <type>Message Builder</type>
            <data>
              <entry>
                <string>Variable</string>
                <string>tmp[&apos;roundNumber&apos;]</string>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;round_number&apos;].toString()</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>2</sequenceNumber>
            <name>visitDate (out)</name>
            <script>tmp[&apos;visitDate&apos;] = validate(msg[&apos;visit_date&apos;].toString(), &apos;&apos;, new Array());</script>
            <type>Message Builder</type>
            <data>
              <entry>
                <string>Variable</string>
                <string>tmp[&apos;visitDate&apos;]</string>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;visit_date&apos;].toString()</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>3</sequenceNumber>
            <name>visitLocation - extId (out)</name>
            <script>tmp[&apos;visitLocation&apos;][&apos;extId&apos;] = validate(msg[&apos;location_id&apos;].toString().toUpperCase(), &apos;&apos;, new Array());</script>
            <type>Message Builder</type>
            <data>
              <entry>
                <string>Variable</string>
                <string>tmp[&apos;visitLocation&apos;][&apos;extId&apos;]</string>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;location_id&apos;].toString().toUpperCase()</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>4</sequenceNumber>
            <name>extId (out)</name>
            <script>tmp[&apos;extId&apos;] = validate(msg[&apos;visit_id&apos;].toString().toUpperCase(), &apos;&apos;, new Array());</script>
            <type>Message Builder</type>
            <data>
              <entry>
                <string>Variable</string>
                <string>tmp[&apos;extId&apos;]</string>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;visit_id&apos;].toString().toUpperCase()</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64">PHZpc2l0IGV2ZW50PSJ2aXNpdCIgdGFibGUtbmFtZT0idmlzaXRfcmVnaXN0cmF0aW9uX2NvcmUi
PgogICAgPF91cmk+PC9fdXJpPgogICAgPHZpc2l0X2RhdGU+PC92aXNpdF9kYXRlPgogICAgPHZp
c2l0X2lkPjwvdmlzaXRfaWQ+CiAgICA8bG9jYXRpb25faWQ+PC9sb2NhdGlvbl9pZD4KICAgIDxm
aWVsZF93b3JrZXJfaWQ+PC9maWVsZF93b3JrZXJfaWQ+CiAgICA8cm91bmRfbnVtYmVyPjwvcm91
bmRfbnVtYmVyPgo8L3Zpc2l0Pg==</inboundTemplate>
        <outboundTemplate encoding="base64">PHZpc2l0PgogIDxleHRJZD48L2V4dElkPgogIDxjb2xsZWN0ZWRCeT4KICAgIDxleHRJZD48L2V4
dElkPgogIDwvY29sbGVjdGVkQnk+CiAgPHJvdW5kTnVtYmVyPjwvcm91bmROdW1iZXI+CiAgPHZp
c2l0RGF0ZT48L3Zpc2l0RGF0ZT4KICA8dmlzaXRMb2NhdGlvbj4KICAgIDxleHRJZD48L2V4dElk
PgogIDwvdmlzaXRMb2NhdGlvbj4KPC92aXNpdD4=</outboundTemplate>
        <inboundDataType>XML</inboundDataType>
        <outboundDataType>XML</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.2.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.2.1">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.2.1">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.2.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.2.1">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.2.1">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.2.1">
        <steps/>
        <inboundDataType>XML</inboundDataType>
        <outboundDataType>XML</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.2.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.2.1">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.2.1">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.2.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.2.1">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.2.1">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.2.1">
        <rules>
          <rule>
            <sequenceNumber>0</sequenceNumber>
            <name>New Rule</name>
            <data>
              <entry>
                <string>Script</string>
                <string>return msg[&quot;@event&quot;].toString() === &quot;visit&quot;;</string>
              </entry>
            </data>
            <type>JavaScript</type>
            <script>return msg[&quot;@event&quot;].toString() === &quot;visit&quot;;</script>
            <operator>NONE</operator>
          </rule>
        </rules>
      </filter>
      <transportName>HTTP Sender</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.2.1">
      <metaDataId>3</metaDataId>
      <name>Death</name>
      <properties class="com.mirth.connect.connectors.http.HttpDispatcherProperties" version="3.2.1">
        <pluginProperties/>
        <destinationConnectorProperties version="3.2.1">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-set">
            <string>Default Resource</string>
          </resourceIds>
        </destinationConnectorProperties>
        <host>${OPENHDS_PATH}/deaths</host>
        <useProxyServer>false</useProxyServer>
        <proxyAddress></proxyAddress>
        <proxyPort></proxyPort>
        <method>post</method>
        <headers class="linked-hash-map"/>
        <parameters class="linked-hash-map"/>
        <responseXmlBody>false</responseXmlBody>
        <responseParseMultipart>true</responseParseMultipart>
        <responseIncludeMetadata>false</responseIncludeMetadata>
        <responseBinaryMimeTypes></responseBinaryMimeTypes>
        <responseBinaryMimeTypesRegex>false</responseBinaryMimeTypesRegex>
        <multipart>false</multipart>
        <useAuthentication>true</useAuthentication>
        <authenticationType>Basic</authenticationType>
        <usePreemptiveAuthentication>true</usePreemptiveAuthentication>
        <username>${OPENHDS_USER}</username>
        <password>${OPENHDS_PASSWORD}</password>
        <content>${message.transformedData}</content>
        <contentType>application/xml</contentType>
        <dataTypeBinary>false</dataTypeBinary>
        <charset>UTF-8</charset>
        <socketTimeout>30000</socketTimeout>
      </properties>
      <transformer version="3.2.1">
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>visitDeath - extId (out)</name>
            <script>tmp[&apos;visitDeath&apos;][&apos;extId&apos;] = validate(msg[&apos;visit_id&apos;].toString().toUpperCase(), &apos;&apos;, new Array());</script>
            <type>Message Builder</type>
            <data>
              <entry>
                <string>Variable</string>
                <string>tmp[&apos;visitDeath&apos;][&apos;extId&apos;]</string>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;visit_id&apos;].toString().toUpperCase()</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>1</sequenceNumber>
            <name>individual - extId (out)</name>
            <script>tmp[&apos;individual&apos;][&apos;extId&apos;] = validate(msg[&apos;individual_id&apos;].toString().toUpperCase(), &apos;&apos;, new Array());</script>
            <type>Message Builder</type>
            <data>
              <entry>
                <string>Variable</string>
                <string>tmp[&apos;individual&apos;][&apos;extId&apos;]</string>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;individual_id&apos;].toString().toUpperCase()</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>2</sequenceNumber>
            <name>deathPlace (out)</name>
            <script>tmp[&apos;deathPlace&apos;] = validate(msg[&apos;place_of_death&apos;].toString().toUpperCase(), &apos;&apos;, new Array());</script>
            <type>Message Builder</type>
            <data>
              <entry>
                <string>Variable</string>
                <string>tmp[&apos;deathPlace&apos;]</string>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;place_of_death&apos;].toString().toUpperCase()</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>3</sequenceNumber>
            <name>deathCause (out)</name>
            <script>tmp[&apos;deathCause&apos;] = validate(msg[&apos;cause_of_death&apos;].toString().toUpperCase(), &apos;&apos;, new Array());</script>
            <type>Message Builder</type>
            <data>
              <entry>
                <string>Variable</string>
                <string>tmp[&apos;deathCause&apos;]</string>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;cause_of_death&apos;].toString().toUpperCase()</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>4</sequenceNumber>
            <name>deathDate (out)</name>
            <script>tmp[&apos;deathDate&apos;] = validate(msg[&apos;date_of_death&apos;].toString(), &apos;&apos;, new Array());</script>
            <type>Message Builder</type>
            <data>
              <entry>
                <string>Variable</string>
                <string>tmp[&apos;deathDate&apos;]</string>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;date_of_death&apos;].toString()</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>5</sequenceNumber>
            <name>collectedBy - extId (out)</name>
            <script>tmp[&apos;collectedBy&apos;][&apos;extId&apos;] = validate(msg[&apos;field_worker_id&apos;].toString().toUpperCase(), &apos;&apos;, new Array());</script>
            <type>Message Builder</type>
            <data>
              <entry>
                <string>Variable</string>
                <string>tmp[&apos;collectedBy&apos;][&apos;extId&apos;]</string>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;field_worker_id&apos;].toString().toUpperCase()</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64">PGRlYXRoPgogICAgPF91cmk+PC9fdXJpPgogICAgPHZpc2l0X2lkPjwvdmlzaXRfaWQ+CiAgICA8
Y2F1c2Vfb2ZfZGVhdGg+PC9jYXVzZV9vZl9kZWF0aD4KICAgIDxmaWVsZF93b3JrZXJfaWQ+PC9m
aWVsZF93b3JrZXJfaWQ+CiAgICA8ZGF0ZV9vZl9kZWF0aD48L2RhdGVfb2ZfZGVhdGg+CiAgICA8
cGxhY2Vfb2ZfZGVhdGg+PC9wbGFjZV9vZl9kZWF0aD4KICAgIDxpbmRpdmlkdWFsX2lkPjwvaW5k
aXZpZHVhbF9pZD4KPC9kZWF0aD4=</inboundTemplate>
        <outboundTemplate encoding="base64">PGRlYXRoPgogIDx2aXNpdERlYXRoPgogICAgPGV4dElkPjwvZXh0SWQ+CiAgPC92aXNpdERlYXRo
PgogIDxpbmRpdmlkdWFsPgogICAgPGV4dElkPjwvZXh0SWQ+CiAgPC9pbmRpdmlkdWFsPgogIDxk
ZWF0aFBsYWNlPjwvZGVhdGhQbGFjZT4KICA8ZGVhdGhDYXVzZT48L2RlYXRoQ2F1c2U+CiAgPGRl
YXRoRGF0ZT48L2RlYXRoRGF0ZT4KICA8Y29sbGVjdGVkQnk+CiAgICA8ZXh0SWQ+PC9leHRJZD4K
ICA8L2NvbGxlY3RlZEJ5Pgo8L2RlYXRoPg==</outboundTemplate>
        <inboundDataType>XML</inboundDataType>
        <outboundDataType>XML</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.2.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.2.1">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.2.1">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.2.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.2.1">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.2.1">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.2.1">
        <steps/>
        <inboundDataType>XML</inboundDataType>
        <outboundDataType>XML</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.2.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.2.1">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.2.1">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.2.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.2.1">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.2.1">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.2.1">
        <rules>
          <rule>
            <sequenceNumber>0</sequenceNumber>
            <name>New Rule</name>
            <data>
              <entry>
                <string>Script</string>
                <string>return msg[&quot;@event&quot;].toString() === &quot;death&quot;;</string>
              </entry>
            </data>
            <type>JavaScript</type>
            <script>return msg[&quot;@event&quot;].toString() === &quot;death&quot;;</script>
            <operator>NONE</operator>
          </rule>
        </rules>
      </filter>
      <transportName>HTTP Sender</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.2.1">
      <metaDataId>5</metaDataId>
      <name>Out Migration</name>
      <properties class="com.mirth.connect.connectors.http.HttpDispatcherProperties" version="3.2.1">
        <pluginProperties/>
        <destinationConnectorProperties version="3.2.1">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-set">
            <string>Default Resource</string>
          </resourceIds>
        </destinationConnectorProperties>
        <host>${OPENHDS_PATH}/outmigrations</host>
        <useProxyServer>false</useProxyServer>
        <proxyAddress></proxyAddress>
        <proxyPort></proxyPort>
        <method>post</method>
        <headers class="linked-hash-map"/>
        <parameters class="linked-hash-map"/>
        <responseXmlBody>false</responseXmlBody>
        <responseParseMultipart>true</responseParseMultipart>
        <responseIncludeMetadata>false</responseIncludeMetadata>
        <responseBinaryMimeTypes></responseBinaryMimeTypes>
        <responseBinaryMimeTypesRegex>false</responseBinaryMimeTypesRegex>
        <multipart>false</multipart>
        <useAuthentication>true</useAuthentication>
        <authenticationType>Basic</authenticationType>
        <usePreemptiveAuthentication>true</usePreemptiveAuthentication>
        <username>${OPENHDS_USER}</username>
        <password>${OPENHDS_PASSWORD}</password>
        <content>${message.transformedData}</content>
        <contentType>application/xml</contentType>
        <dataTypeBinary>false</dataTypeBinary>
        <charset>UTF-8</charset>
        <socketTimeout>30000</socketTimeout>
      </properties>
      <transformer version="3.2.1">
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>collectedBy - extId (out)</name>
            <script>tmp[&apos;collectedBy&apos;][&apos;extId&apos;] = validate(msg[&apos;field_worker_id&apos;].toString().toUpperCase(), &apos;&apos;, new Array());</script>
            <type>Message Builder</type>
            <data>
              <entry>
                <string>Variable</string>
                <string>tmp[&apos;collectedBy&apos;][&apos;extId&apos;]</string>
              </entry>
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;field_worker_id&apos;].toString().toUpperCase()</string>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>1</sequenceNumber>
            <name>individual - extId (out)</name>
            <script>tmp[&apos;individual&apos;][&apos;extId&apos;] = validate(msg[&apos;individual_id&apos;].toString().toUpperCase(), &apos;&apos;, new Array());</script>
            <type>Message Builder</type>
            <data>
              <entry>
                <string>Variable</string>
                <string>tmp[&apos;individual&apos;][&apos;extId&apos;]</string>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;individual_id&apos;].toString().toUpperCase()</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>2</sequenceNumber>
            <name>destination (out)</name>
            <script>tmp[&apos;destination&apos;] = validate(msg[&apos;name_of_destination&apos;].toString().toUpperCase(), &apos;&apos;, new Array());</script>
            <type>Message Builder</type>
            <data>
              <entry>
                <string>Variable</string>
                <string>tmp[&apos;destination&apos;]</string>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;name_of_destination&apos;].toString().toUpperCase()</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>3</sequenceNumber>
            <name>reason (out)</name>
            <script>tmp[&apos;reason&apos;] = validate(msg[&apos;reason_for_out_migration&apos;].toString().toUpperCase(), &apos;&apos;, new Array());</script>
            <type>Message Builder</type>
            <data>
              <entry>
                <string>Variable</string>
                <string>tmp[&apos;reason&apos;]</string>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;reason_for_out_migration&apos;].toString().toUpperCase()</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>4</sequenceNumber>
            <name>visit - extId (out)</name>
            <script>tmp[&apos;visit&apos;][&apos;extId&apos;] = validate(msg[&apos;visit_id&apos;].toString().toUpperCase(), &apos;&apos;, new Array());</script>
            <type>Message Builder</type>
            <data>
              <entry>
                <string>Variable</string>
                <string>tmp[&apos;visit&apos;][&apos;extId&apos;]</string>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;visit_id&apos;].toString().toUpperCase()</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>5</sequenceNumber>
            <name>recordedDate (out)</name>
            <script>tmp[&apos;recordedDate&apos;] = validate(msg[&apos;date_of_migration&apos;].toString(), &apos;&apos;, new Array());</script>
            <type>Message Builder</type>
            <data>
              <entry>
                <string>Variable</string>
                <string>tmp[&apos;recordedDate&apos;]</string>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;date_of_migration&apos;].toString()</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64">PG91dG1pZ3JhdGlvbj4KICAgIDxfdXJpPjwvX3VyaT4KICAgIDx2aXNpdF9pZD48L3Zpc2l0X2lk
PgogICAgPG5hbWVfb2ZfZGVzdGluYXRpb24+PC9uYW1lX29mX2Rlc3RpbmF0aW9uPgogICAgPGZp
ZWxkX3dvcmtlcl9pZD48L2ZpZWxkX3dvcmtlcl9pZD4KICAgIDxkYXRlX29mX21pZ3JhdGlvbj48
L2RhdGVfb2ZfbWlncmF0aW9uPgogICAgPHJlYXNvbl9mb3Jfb3V0X21pZ3JhdGlvbj48L3JlYXNv
bl9mb3Jfb3V0X21pZ3JhdGlvbj4KICAgIDxpbmRpdmlkdWFsX2lkPjwvaW5kaXZpZHVhbF9pZD4K
PC9vdXRtaWdyYXRpb24+</inboundTemplate>
        <outboundTemplate encoding="base64">PG91dG1pZ3JhdGlvbj4KICAgIDxjb2xsZWN0ZWRCeT4KICAgICAgICA8ZXh0SWQ+PC9leHRJZD4K
ICAgIDwvY29sbGVjdGVkQnk+CiAgICA8aW5kaXZpZHVhbD4KICAgICAgICA8ZXh0SWQ+PC9leHRJ
ZD4KICAgIDwvaW5kaXZpZHVhbD4KICAgIDxkZXN0aW5hdGlvbj48L2Rlc3RpbmF0aW9uPgogICAg
PHJlYXNvbj48L3JlYXNvbj4KICAgIDx2aXNpdD4KICAgICAgICA8ZXh0SWQ+PC9leHRJZD4KICAg
IDwvdmlzaXQ+CiAgICA8cmVjb3JkZWREYXRlPjwvcmVjb3JkZWREYXRlPgo8L291dG1pZ3JhdGlv
bj4=</outboundTemplate>
        <inboundDataType>XML</inboundDataType>
        <outboundDataType>XML</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.2.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.2.1">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.2.1">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.2.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.2.1">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.2.1">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.2.1">
        <steps/>
        <inboundDataType>XML</inboundDataType>
        <outboundDataType>XML</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.2.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.2.1">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.2.1">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.2.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.2.1">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.2.1">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.2.1">
        <rules>
          <rule>
            <sequenceNumber>0</sequenceNumber>
            <name>New Rule</name>
            <data>
              <entry>
                <string>Script</string>
                <string>return msg[&quot;@event&quot;].toString() === &quot;outmigration&quot;;</string>
              </entry>
            </data>
            <type>JavaScript</type>
            <script>return msg[&quot;@event&quot;].toString() === &quot;outmigration&quot;;</script>
            <operator>NONE</operator>
          </rule>
        </rules>
      </filter>
      <transportName>HTTP Sender</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.2.1">
      <metaDataId>6</metaDataId>
      <name>Out Mig IM</name>
      <properties class="com.mirth.connect.connectors.http.HttpDispatcherProperties" version="3.2.1">
        <pluginProperties/>
        <destinationConnectorProperties version="3.2.1">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-set">
            <string>Default Resource</string>
          </resourceIds>
        </destinationConnectorProperties>
        <host>${OPENHDS_PATH}/outmigrations</host>
        <useProxyServer>false</useProxyServer>
        <proxyAddress></proxyAddress>
        <proxyPort></proxyPort>
        <method>post</method>
        <headers class="linked-hash-map"/>
        <parameters class="linked-hash-map"/>
        <responseXmlBody>false</responseXmlBody>
        <responseParseMultipart>true</responseParseMultipart>
        <responseIncludeMetadata>false</responseIncludeMetadata>
        <responseBinaryMimeTypes></responseBinaryMimeTypes>
        <responseBinaryMimeTypesRegex>false</responseBinaryMimeTypesRegex>
        <multipart>false</multipart>
        <useAuthentication>true</useAuthentication>
        <authenticationType>Basic</authenticationType>
        <usePreemptiveAuthentication>true</usePreemptiveAuthentication>
        <username>${OPENHDS_USER}</username>
        <password>${OPENHDS_PASSWORD}</password>
        <content>${message.transformedData}</content>
        <contentType>application/xml</contentType>
        <dataTypeBinary>false</dataTypeBinary>
        <charset>UTF-8</charset>
        <socketTimeout>30000</socketTimeout>
      </properties>
      <transformer version="3.2.1">
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>collectedBy - extId (out)</name>
            <script>tmp[&apos;collectedBy&apos;][&apos;extId&apos;] = validate(msg[&apos;field_worker_id&apos;].toString().toUpperCase(), &apos;&apos;, new Array());</script>
            <type>Message Builder</type>
            <data>
              <entry>
                <string>Variable</string>
                <string>tmp[&apos;collectedBy&apos;][&apos;extId&apos;]</string>
              </entry>
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;field_worker_id&apos;].toString().toUpperCase()</string>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>1</sequenceNumber>
            <name>individual - extId (out) &lt;-- individual_id (in)</name>
            <script>tmp[&apos;individual&apos;][&apos;extId&apos;] = validate(msg[&apos;individual_info_individual_id&apos;].toString().toUpperCase(), &apos;&apos;, new Array());</script>
            <type>Message Builder</type>
            <data>
              <entry>
                <string>Variable</string>
                <string>tmp[&apos;individual&apos;][&apos;extId&apos;]</string>
              </entry>
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;individual_info_individual_id&apos;].toString().toUpperCase()</string>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>2</sequenceNumber>
            <name>destination (out)</name>
            <script>tmp[&apos;destination&apos;] = validate(msg[&apos;location_id&apos;].toString().toUpperCase(), &apos;&apos;, new Array());</script>
            <type>Message Builder</type>
            <data>
              <entry>
                <string>Variable</string>
                <string>tmp[&apos;destination&apos;]</string>
              </entry>
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;location_id&apos;].toString().toUpperCase()</string>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>3</sequenceNumber>
            <name>reason (out)</name>
            <script>tmp[&apos;reason&apos;] = validate(msg[&apos;reason&apos;].toString().toUpperCase(), &apos;&apos;, new Array());</script>
            <type>Message Builder</type>
            <data>
              <entry>
                <string>Variable</string>
                <string>tmp[&apos;reason&apos;]</string>
              </entry>
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;reason&apos;].toString().toUpperCase()</string>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>4</sequenceNumber>
            <name>visit - extId (out)</name>
            <script>tmp[&apos;visit&apos;][&apos;extId&apos;] = validate(msg[&apos;visit_id&apos;].toString().toUpperCase(), &apos;&apos;, new Array());</script>
            <type>Message Builder</type>
            <data>
              <entry>
                <string>Variable</string>
                <string>tmp[&apos;visit&apos;][&apos;extId&apos;]</string>
              </entry>
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;visit_id&apos;].toString().toUpperCase()</string>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>5</sequenceNumber>
            <name>recordedDate (out)</name>
            <script>tmp[&apos;recordedDate&apos;] = validate(msg[&apos;date_of_migration&apos;].toString(), &apos;&apos;, new Array());</script>
            <type>Message Builder</type>
            <data>
              <entry>
                <string>Variable</string>
                <string>tmp[&apos;recordedDate&apos;]</string>
              </entry>
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;date_of_migration&apos;].toString()</string>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64">PG91dG1pZ3JhdGlvbj4KICAgIDxfdXJpPjwvX3VyaT4KICAgIDx2aXNpdF9pZD48L3Zpc2l0X2lk
PgogICAgPGxvY2F0aW9uX2lkPjwvbG9jYXRpb25faWQ+CiAgICA8ZmllbGRfd29ya2VyX2lkPjwv
ZmllbGRfd29ya2VyX2lkPgogICAgPGRhdGVfb2ZfbWlncmF0aW9uPjwvZGF0ZV9vZl9taWdyYXRp
b24+CiAgICA8cmVhc29uPjwvcmVhc29uPgogICAgPGluZGl2aWR1YWxfaW5mb19pbmRpdmlkdWFs
X2lkPjwvaW5kaXZpZHVhbF9pbmZvX2luZGl2aWR1YWxfaWQ+Cjwvb3V0bWlncmF0aW9uPg==</inboundTemplate>
        <outboundTemplate encoding="base64">PG91dG1pZ3JhdGlvbj4KICAgIDxjb2xsZWN0ZWRCeT4KICAgICAgICA8ZXh0SWQ+PC9leHRJZD4K
ICAgIDwvY29sbGVjdGVkQnk+CiAgICA8aW5kaXZpZHVhbD4KICAgICAgICA8ZXh0SWQ+PC9leHRJ
ZD4KICAgIDwvaW5kaXZpZHVhbD4KICAgIDxkZXN0aW5hdGlvbj48L2Rlc3RpbmF0aW9uPgogICAg
PHJlYXNvbj48L3JlYXNvbj4KICAgIDx2aXNpdD4KICAgICAgICA8ZXh0SWQ+PC9leHRJZD4KICAg
IDwvdmlzaXQ+CiAgICA8cmVjb3JkZWREYXRlPjwvcmVjb3JkZWREYXRlPgo8L291dG1pZ3JhdGlv
bj4=</outboundTemplate>
        <inboundDataType>XML</inboundDataType>
        <outboundDataType>XML</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.2.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.2.1">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.2.1">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.2.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.2.1">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.2.1">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.2.1">
        <steps/>
        <inboundDataType>XML</inboundDataType>
        <outboundDataType>XML</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.2.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.2.1">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.2.1">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.2.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.2.1">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.2.1">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.2.1">
        <rules>
          <rule>
            <sequenceNumber>0</sequenceNumber>
            <name>New Rule</name>
            <data>
              <entry>
                <string>Script</string>
                <string>return msg[&quot;@event&quot;].toString() === &quot;outmigrationIM&quot;;</string>
              </entry>
            </data>
            <type>JavaScript</type>
            <script>return msg[&quot;@event&quot;].toString() === &quot;outmigrationIM&quot;;</script>
            <operator>NONE</operator>
          </rule>
        </rules>
      </filter>
      <transportName>HTTP Sender</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.2.1">
      <metaDataId>7</metaDataId>
      <name>Pregnancy Obs</name>
      <properties class="com.mirth.connect.connectors.http.HttpDispatcherProperties" version="3.2.1">
        <pluginProperties/>
        <destinationConnectorProperties version="3.2.1">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-set">
            <string>Default Resource</string>
          </resourceIds>
        </destinationConnectorProperties>
        <host>${OPENHDS_PATH}/pregnancyobservations</host>
        <useProxyServer>false</useProxyServer>
        <proxyAddress></proxyAddress>
        <proxyPort></proxyPort>
        <method>post</method>
        <headers class="linked-hash-map"/>
        <parameters class="linked-hash-map"/>
        <responseXmlBody>false</responseXmlBody>
        <responseParseMultipart>true</responseParseMultipart>
        <responseIncludeMetadata>false</responseIncludeMetadata>
        <responseBinaryMimeTypes></responseBinaryMimeTypes>
        <responseBinaryMimeTypesRegex>false</responseBinaryMimeTypesRegex>
        <multipart>false</multipart>
        <useAuthentication>true</useAuthentication>
        <authenticationType>Basic</authenticationType>
        <usePreemptiveAuthentication>true</usePreemptiveAuthentication>
        <username>${OPENHDS_USER}</username>
        <password>${OPENHDS_PASSWORD}</password>
        <content>${message.transformedData}</content>
        <contentType>application/xml</contentType>
        <dataTypeBinary>false</dataTypeBinary>
        <charset>UTF-8</charset>
        <socketTimeout>30000</socketTimeout>
      </properties>
      <transformer version="3.2.1">
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>mother - extId (out)</name>
            <script>tmp[&apos;mother&apos;][&apos;extId&apos;] = validate(msg[&apos;individual_id&apos;].toString().toUpperCase(), &apos;&apos;, new Array());</script>
            <type>Message Builder</type>
            <data>
              <entry>
                <string>Variable</string>
                <string>tmp[&apos;mother&apos;][&apos;extId&apos;]</string>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;individual_id&apos;].toString().toUpperCase()</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>1</sequenceNumber>
            <name>expectedDeliveryDate (out)</name>
            <script>tmp[&apos;expectedDeliveryDate&apos;] = validate(msg[&apos;expected_delivery_date&apos;].toString(), &apos;&apos;, new Array());</script>
            <type>Message Builder</type>
            <data>
              <entry>
                <string>Variable</string>
                <string>tmp[&apos;expectedDeliveryDate&apos;]</string>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;expected_delivery_date&apos;].toString()</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>2</sequenceNumber>
            <name>recordedDate (out)</name>
            <script>tmp[&apos;recordedDate&apos;] = validate(msg[&apos;recorded_date&apos;].toString(), &apos;&apos;, new Array());</script>
            <type>Message Builder</type>
            <data>
              <entry>
                <string>Variable</string>
                <string>tmp[&apos;recordedDate&apos;]</string>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;recorded_date&apos;].toString()</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>3</sequenceNumber>
            <name>collectedBy - extId (out)</name>
            <script>tmp[&apos;collectedBy&apos;][&apos;extId&apos;] = validate(msg[&apos;field_worker_id&apos;].toString().toUpperCase(), &apos;&apos;, new Array());</script>
            <type>Message Builder</type>
            <data>
              <entry>
                <string>Variable</string>
                <string>tmp[&apos;collectedBy&apos;][&apos;extId&apos;]</string>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;field_worker_id&apos;].toString().toUpperCase()</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>4</sequenceNumber>
            <name>visit - extId (out)</name>
            <script>tmp[&apos;visit&apos;][&apos;extId&apos;] = validate(msg[&apos;visit_id&apos;].toString().toUpperCase(), &apos;&apos;, new Array());</script>
            <type>Message Builder</type>
            <data>
              <entry>
                <string>Variable</string>
                <string>tmp[&apos;visit&apos;][&apos;extId&apos;]</string>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;visit_id&apos;].toString().toUpperCase()</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64">PHByZWduYW5jeW9icz4KICAgIDxfdXJpPjwvX3VyaT4KICAgIDx2aXNpdF9pZD48L3Zpc2l0X2lk
PgogICAgPGV4cGVjdGVkX2RlbGl2ZXJ5X2RhdGU+PC9leHBlY3RlZF9kZWxpdmVyeV9kYXRlPgog
ICAgPGZpZWxkX3dvcmtlcl9pZD48L2ZpZWxkX3dvcmtlcl9pZD4KICAgIDxyZWNvcmRlZF9kYXRl
PjwvcmVjb3JkZWRfZGF0ZT4KICAgIDxpbmRpdmlkdWFsX2lkPjwvaW5kaXZpZHVhbF9pZD4KPC9w
cmVnbmFuY3lvYnM+</inboundTemplate>
        <outboundTemplate encoding="base64">PHByZWduYW5jeW9ic2VydmF0aW9uPgogIDxtb3RoZXI+CiAgICA8ZXh0SWQ+PC9leHRJZD4KICA8
L21vdGhlcj4KICA8ZXhwZWN0ZWREZWxpdmVyeURhdGU+PC9leHBlY3RlZERlbGl2ZXJ5RGF0ZT4K
ICA8cmVjb3JkZWREYXRlPjwvcmVjb3JkZWREYXRlPgogIDxjb2xsZWN0ZWRCeT4KICAgIDxleHRJ
ZD48L2V4dElkPgogIDwvY29sbGVjdGVkQnk+CiAgPHZpc2l0PgogICAgPGV4dElkPjwvZXh0SWQ+
CiAgPC92aXNpdD4KPC9wcmVnbmFuY3lvYnNlcnZhdGlvbj4=</outboundTemplate>
        <inboundDataType>XML</inboundDataType>
        <outboundDataType>XML</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.2.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.2.1">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.2.1">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.2.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.2.1">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.2.1">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.2.1">
        <steps/>
        <inboundDataType>XML</inboundDataType>
        <outboundDataType>XML</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.2.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.2.1">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.2.1">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.2.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.2.1">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.2.1">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.2.1">
        <rules>
          <rule>
            <sequenceNumber>0</sequenceNumber>
            <name>New Rule</name>
            <data>
              <entry>
                <string>Script</string>
                <string>return msg[&quot;@event&quot;].toString() === &quot;pregnancyobs&quot;;</string>
              </entry>
            </data>
            <type>JavaScript</type>
            <script>return msg[&quot;@event&quot;].toString() === &quot;pregnancyobs&quot;;</script>
            <operator>NONE</operator>
          </rule>
        </rules>
      </filter>
      <transportName>HTTP Sender</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.2.1">
      <metaDataId>8</metaDataId>
      <name>Internal Inmigrations</name>
      <properties class="com.mirth.connect.connectors.http.HttpDispatcherProperties" version="3.2.1">
        <pluginProperties/>
        <destinationConnectorProperties version="3.2.1">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>3000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-set">
            <string>Default Resource</string>
          </resourceIds>
        </destinationConnectorProperties>
        <host>${OPENHDS_PATH}/inmigrations</host>
        <useProxyServer>false</useProxyServer>
        <proxyAddress></proxyAddress>
        <proxyPort></proxyPort>
        <method>post</method>
        <headers class="linked-hash-map"/>
        <parameters class="linked-hash-map"/>
        <responseXmlBody>false</responseXmlBody>
        <responseParseMultipart>true</responseParseMultipart>
        <responseIncludeMetadata>false</responseIncludeMetadata>
        <responseBinaryMimeTypes></responseBinaryMimeTypes>
        <responseBinaryMimeTypesRegex>false</responseBinaryMimeTypesRegex>
        <multipart>false</multipart>
        <useAuthentication>true</useAuthentication>
        <authenticationType>Basic</authenticationType>
        <usePreemptiveAuthentication>true</usePreemptiveAuthentication>
        <username>${OPENHDS_USER}</username>
        <password>${OPENHDS_PASSWORD}</password>
        <content>${message.transformedData}</content>
        <contentType>application/xml</contentType>
        <dataTypeBinary>false</dataTypeBinary>
        <charset>UTF-8</charset>
        <socketTimeout>30000</socketTimeout>
      </properties>
      <transformer version="3.2.1">
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>collectedBy - extId (out)</name>
            <script>tmp[&apos;collectedBy&apos;][&apos;extId&apos;] = validate(msg[&apos;field_worker_id&apos;].toString().toUpperCase(), &apos;&apos;, new Array());</script>
            <type>Message Builder</type>
            <data>
              <entry>
                <string>Variable</string>
                <string>tmp[&apos;collectedBy&apos;][&apos;extId&apos;]</string>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;field_worker_id&apos;].toString().toUpperCase()</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>1</sequenceNumber>
            <name>visit - extId (out)</name>
            <script>tmp[&apos;visit&apos;][&apos;extId&apos;] = validate(msg[&apos;visit_id&apos;].toString().toUpperCase(), &apos;&apos;, new Array());</script>
            <type>Message Builder</type>
            <data>
              <entry>
                <string>Variable</string>
                <string>tmp[&apos;visit&apos;][&apos;extId&apos;]</string>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;visit_id&apos;].toString().toUpperCase()</string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>2</sequenceNumber>
            <name>individual - extId (out)</name>
            <script>tmp[&apos;individual&apos;][&apos;extId&apos;] = validate(msg[&apos;individual_info_individual_id&apos;].toString().toUpperCase(), &apos;&apos;, new Array());</script>
            <type>Message Builder</type>
            <data>
              <entry>
                <string>Variable</string>
                <string>tmp[&apos;individual&apos;][&apos;extId&apos;]</string>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;individual_info_individual_id&apos;].toString().toUpperCase()</string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>3</sequenceNumber>
            <name>origin (out)</name>
            <script>tmp[&apos;origin&apos;] = validate(msg[&apos;origin&apos;].toString().toUpperCase(), &apos;&apos;, new Array());</script>
            <type>Message Builder</type>
            <data>
              <entry>
                <string>Variable</string>
                <string>tmp[&apos;origin&apos;]</string>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;origin&apos;].toString().toUpperCase()</string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>4</sequenceNumber>
            <name>reason (out)</name>
            <script>tmp[&apos;reason&apos;] = validate(msg[&apos;reason&apos;].toString().toUpperCase(), &apos;&apos;, new Array());</script>
            <type>Message Builder</type>
            <data>
              <entry>
                <string>Variable</string>
                <string>tmp[&apos;reason&apos;]</string>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;reason&apos;].toString().toUpperCase()</string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>5</sequenceNumber>
            <name>recordedDate (out)</name>
            <script>tmp[&apos;recordedDate&apos;] = validate(msg[&apos;date_of_migration&apos;].toString(), &apos;&apos;, new Array());</script>
            <type>Message Builder</type>
            <data>
              <entry>
                <string>Variable</string>
                <string>tmp[&apos;recordedDate&apos;]</string>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;date_of_migration&apos;].toString()</string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>6</sequenceNumber>
            <name>migType (out)</name>
            <script>tmp[&apos;migType&apos;] = validate(&apos;&apos;, &apos;INTERNAL_INMIGRATION&apos;, new Array());</script>
            <type>Message Builder</type>
            <data>
              <entry>
                <string>Variable</string>
                <string>tmp[&apos;migType&apos;]</string>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string>&apos;INTERNAL_INMIGRATION&apos;</string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
              <entry>
                <string>Mapping</string>
                <string></string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64">PGlubWlncmF0aW9uPgogICAgPF91cmk+PC9fdXJpPg0KICAgIDxyZWFzb24+PC9yZWFzb24+DQog
ICAgPGRhdGVfb2ZfbWlncmF0aW9uPjwvZGF0ZV9vZl9taWdyYXRpb24+DQogICAgPGluZGl2aWR1
YWxfaW5mb19pbmRpdmlkdWFsX2lkPjwvaW5kaXZpZHVhbF9pbmZvX2luZGl2aWR1YWxfaWQ+DQog
ICAgPG9yaWdpbj48L29yaWdpbj4NCiAgICA8dmlzaXRfaWQ+PC92aXNpdF9pZD4NCiAgICA8bG9j
YXRpb25faWQ+PC9sb2NhdGlvbl9pZD4NCiAgICA8ZmllbGRfd29ya2VyX2lkPjwvZmllbGRfd29y
a2VyX2lkPg0KPC9pbm1pZ3JhdGlvbj4NCg==</inboundTemplate>
        <outboundTemplate encoding="base64">PGlubWlncmF0aW9uPgogICAgPGNvbGxlY3RlZEJ5PgogICAgICAgIDxleHRJZD48L2V4dElkPgog
ICAgPC9jb2xsZWN0ZWRCeT4KICAgIDx2aXNpdD4KICAgICAgICA8ZXh0SWQ+PC9leHRJZD4KICAg
IDwvdmlzaXQ+CiAgICA8aW5kaXZpZHVhbD4KICAgICAgICA8ZXh0SWQ+PC9leHRJZD4KICAgIDwv
aW5kaXZpZHVhbD4KICAgIDxvcmlnaW4+PC9vcmlnaW4+CiAgICA8cmVhc29uPjwvcmVhc29uPgog
ICAgPHJlY29yZGVkRGF0ZT48L3JlY29yZGVkRGF0ZT4KICAgIDxtaWdUeXBlPklOVEVSTkFMX0lO
TUlHUkFUSU9OPC9taWdUeXBlPgo8L2lubWlncmF0aW9uPg==</outboundTemplate>
        <inboundDataType>XML</inboundDataType>
        <outboundDataType>XML</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.2.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.2.1">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.2.1">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.2.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.2.1">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.2.1">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.2.1">
        <steps/>
        <inboundDataType>XML</inboundDataType>
        <outboundDataType>XML</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.2.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.2.1">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.2.1">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.2.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.2.1">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.2.1">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.2.1">
        <rules>
          <rule>
            <sequenceNumber>0</sequenceNumber>
            <name>New Rule</name>
            <data>
              <entry>
                <string>Script</string>
                <string>return msg[&quot;@event&quot;].toString() === &quot;internal-inmigration&quot;;</string>
              </entry>
            </data>
            <type>JavaScript</type>
            <script>return msg[&quot;@event&quot;].toString() === &quot;internal-inmigration&quot;;</script>
            <operator>NONE</operator>
          </rule>
        </rules>
      </filter>
      <transportName>HTTP Sender</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.2.1">
      <metaDataId>9</metaDataId>
      <name>External Inmigrations</name>
      <properties class="com.mirth.connect.connectors.http.HttpDispatcherProperties" version="3.2.1">
        <pluginProperties/>
        <destinationConnectorProperties version="3.2.1">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>3000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-set">
            <string>Default Resource</string>
          </resourceIds>
        </destinationConnectorProperties>
        <host>${OPENHDS_PATH}/inmigrations</host>
        <useProxyServer>false</useProxyServer>
        <proxyAddress></proxyAddress>
        <proxyPort></proxyPort>
        <method>post</method>
        <headers class="linked-hash-map"/>
        <parameters class="linked-hash-map"/>
        <responseXmlBody>false</responseXmlBody>
        <responseParseMultipart>true</responseParseMultipart>
        <responseIncludeMetadata>false</responseIncludeMetadata>
        <responseBinaryMimeTypes></responseBinaryMimeTypes>
        <responseBinaryMimeTypesRegex>false</responseBinaryMimeTypesRegex>
        <multipart>false</multipart>
        <useAuthentication>true</useAuthentication>
        <authenticationType>Basic</authenticationType>
        <usePreemptiveAuthentication>true</usePreemptiveAuthentication>
        <username>${OPENHDS_USER}</username>
        <password>${OPENHDS_PASSWORD}</password>
        <content>${message.transformedData}</content>
        <contentType>application/xml</contentType>
        <dataTypeBinary>false</dataTypeBinary>
        <charset>UTF-8</charset>
        <socketTimeout>30000</socketTimeout>
      </properties>
      <transformer version="3.2.1">
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>collectedBy - extId (out)</name>
            <script>tmp[&apos;collectedBy&apos;][&apos;extId&apos;] = validate(msg[&apos;field_worker_id&apos;].toString().toUpperCase(), &apos;&apos;, new Array());</script>
            <type>Message Builder</type>
            <data>
              <entry>
                <string>Variable</string>
                <string>tmp[&apos;collectedBy&apos;][&apos;extId&apos;]</string>
              </entry>
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;field_worker_id&apos;].toString().toUpperCase()</string>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>1</sequenceNumber>
            <name>visit - extId (out)</name>
            <script>tmp[&apos;visit&apos;][&apos;extId&apos;] = validate(msg[&apos;visit_id&apos;].toString().toUpperCase(), &apos;&apos;, new Array());</script>
            <type>Message Builder</type>
            <data>
              <entry>
                <string>Variable</string>
                <string>tmp[&apos;visit&apos;][&apos;extId&apos;]</string>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;visit_id&apos;].toString().toUpperCase()</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>2</sequenceNumber>
            <name>individual - extId (out)</name>
            <script>tmp[&apos;individual&apos;][&apos;extId&apos;] = validate(msg[&apos;individual_info_individual_id&apos;].toString().toUpperCase(), &apos;&apos;, new Array());</script>
            <type>Message Builder</type>
            <data>
              <entry>
                <string>Variable</string>
                <string>tmp[&apos;individual&apos;][&apos;extId&apos;]</string>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;individual_info_individual_id&apos;].toString().toUpperCase()</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>3</sequenceNumber>
            <name>origin (out)</name>
            <script>tmp[&apos;origin&apos;] = validate(msg[&apos;movedfrom&apos;].toString().toUpperCase(), &apos;&apos;, new Array());</script>
            <type>Message Builder</type>
            <data>
              <entry>
                <string>Variable</string>
                <string>tmp[&apos;origin&apos;]</string>
              </entry>
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;movedfrom&apos;].toString().toUpperCase()</string>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>4</sequenceNumber>
            <name>reason (out)</name>
            <script>tmp[&apos;reason&apos;] = validate(msg[&apos;reason&apos;].toString().toUpperCase(), &apos;&apos;, new Array());</script>
            <type>Message Builder</type>
            <data>
              <entry>
                <string>Variable</string>
                <string>tmp[&apos;reason&apos;]</string>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;reason&apos;].toString().toUpperCase()</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>5</sequenceNumber>
            <name>recordedDate (out)</name>
            <script>tmp[&apos;recordedDate&apos;] = validate(msg[&apos;date_of_migration&apos;].toString(), &apos;&apos;, new Array());</script>
            <type>Message Builder</type>
            <data>
              <entry>
                <string>Variable</string>
                <string>tmp[&apos;recordedDate&apos;]</string>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;date_of_migration&apos;].toString()</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>6</sequenceNumber>
            <name>migType (out)</name>
            <script>tmp[&apos;migType&apos;] = validate(&apos;&apos;, &apos;EXTERNAL_INMIGRATION&apos;, new Array());</script>
            <type>Message Builder</type>
            <data>
              <entry>
                <string>Variable</string>
                <string>tmp[&apos;migType&apos;]</string>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string>&apos;EXTERNAL_INMIGRATION&apos;</string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
              <entry>
                <string>Mapping</string>
                <string></string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>7</sequenceNumber>
            <name>individual - firstName (out)</name>
            <script>tmp[&apos;individual&apos;][&apos;firstName&apos;] = validate(msg[&apos;individual_info_first_name&apos;].toString().toUpperCase(), &apos;&apos;, new Array());</script>
            <type>Message Builder</type>
            <data>
              <entry>
                <string>Variable</string>
                <string>tmp[&apos;individual&apos;][&apos;firstName&apos;]</string>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;individual_info_first_name&apos;].toString().toUpperCase()</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>8</sequenceNumber>
            <name>individual - lastName (out)</name>
            <script>tmp[&apos;individual&apos;][&apos;lastName&apos;] = validate(msg[&apos;individual_info_last_name&apos;].toString().toUpperCase(), &apos;&apos;, new Array());</script>
            <type>Message Builder</type>
            <data>
              <entry>
                <string>Variable</string>
                <string>tmp[&apos;individual&apos;][&apos;lastName&apos;]</string>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;individual_info_last_name&apos;].toString().toUpperCase()</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>9</sequenceNumber>
            <name>individual - gender (out)</name>
            <script>tmp[&apos;individual&apos;][&apos;gender&apos;] = validate(msg[&apos;individual_info_gender&apos;].toString().toUpperCase(), &apos;&apos;, new Array());</script>
            <type>Message Builder</type>
            <data>
              <entry>
                <string>Variable</string>
                <string>tmp[&apos;individual&apos;][&apos;gender&apos;]</string>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;individual_info_gender&apos;].toString().toUpperCase()</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>10</sequenceNumber>
            <name>individual - dob (out)</name>
            <script>tmp[&apos;individual&apos;][&apos;dob&apos;] = validate(msg[&apos;individual_info_date_of_birth&apos;].toString(), &apos;&apos;, new Array());</script>
            <type>Message Builder</type>
            <data>
              <entry>
                <string>Variable</string>
                <string>tmp[&apos;individual&apos;][&apos;dob&apos;]</string>
              </entry>
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;individual_info_date_of_birth&apos;].toString()</string>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>11</sequenceNumber>
            <name>individual - mother - extId (out)</name>
            <script>tmp[&apos;individual&apos;][&apos;mother&apos;][&apos;extId&apos;] = validate(msg[&apos;individual_info_mother_id&apos;].toString().toUpperCase(), &apos;&apos;, new Array());</script>
            <type>Message Builder</type>
            <data>
              <entry>
                <string>Variable</string>
                <string>tmp[&apos;individual&apos;][&apos;mother&apos;][&apos;extId&apos;]</string>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;individual_info_mother_id&apos;].toString().toUpperCase()</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>12</sequenceNumber>
            <name>individual - father - extId (out)</name>
            <script>tmp[&apos;individual&apos;][&apos;father&apos;][&apos;extId&apos;] = validate(msg[&apos;individual_info_father_id&apos;].toString().toUpperCase(), &apos;&apos;, new Array());</script>
            <type>Message Builder</type>
            <data>
              <entry>
                <string>Variable</string>
                <string>tmp[&apos;individual&apos;][&apos;father&apos;][&apos;extId&apos;]</string>
              </entry>
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;individual_info_father_id&apos;].toString().toUpperCase()</string>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>13</sequenceNumber>
            <name>individual - dobAspect (out)</name>
            <script>tmp[&apos;individual&apos;][&apos;dobAspect&apos;] = validate(msg[&apos;individual_info_partial_date&apos;].toString(), &apos;&apos;, new Array());</script>
            <type>Message Builder</type>
            <data>
              <entry>
                <string>Variable</string>
                <string>tmp[&apos;individual&apos;][&apos;dobAspect&apos;]</string>
              </entry>
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;individual_info_partial_date&apos;].toString()</string>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>14</sequenceNumber>
            <name>individual - middleName (out) &lt;-- individual_info_middlename (in)</name>
            <script>tmp[&apos;individual&apos;][&apos;middleName&apos;] = validate(msg[&apos;individual_info_middlename&apos;].toString(), &apos;&apos;, new Array());</script>
            <type>Message Builder</type>
            <data>
              <entry>
                <string>Variable</string>
                <string>tmp[&apos;individual&apos;][&apos;middleName&apos;]</string>
              </entry>
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;individual_info_middlename&apos;].toString()</string>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64">PGlubWlncmF0aW9uPgogICAgPF91cmk+PC9fdXJpPgogICAgPHJlYXNvbj48L3JlYXNvbj4KICAg
IDxpbmRpdmlkdWFsX2luZm9fZGF0ZV9vZl9iaXJ0aD48L2luZGl2aWR1YWxfaW5mb19kYXRlX29m
X2JpcnRoPgogICAgPGRhdGVfb2ZfbWlncmF0aW9uPjwvZGF0ZV9vZl9taWdyYXRpb24+CiAgICA8
aW5kaXZpZHVhbF9pbmZvX21pZGRsZW5hbWU+PC9pbmRpdmlkdWFsX2luZm9fbWlkZGxlbmFtZT4K
ICAgIDxpbmRpdmlkdWFsX2luZm9fZmlyc3RfbmFtZT48L2luZGl2aWR1YWxfaW5mb19maXJzdF9u
YW1lPgogICAgPGluZGl2aWR1YWxfaW5mb19tb3RoZXJfaWQ+PC9pbmRpdmlkdWFsX2luZm9fbW90
aGVyX2lkPgogICAgPGluZGl2aWR1YWxfaW5mb19pbmRpdmlkdWFsX2lkPjwvaW5kaXZpZHVhbF9p
bmZvX2luZGl2aWR1YWxfaWQ+CiAgICA8bW92ZWRmcm9tPjwvbW92ZWRmcm9tPgogICAgPHZpc2l0
X2lkPjwvdmlzaXRfaWQ+CiAgICA8aW5kaXZpZHVhbF9pbmZvX2dlbmRlcj48L2luZGl2aWR1YWxf
aW5mb19nZW5kZXI+CiAgICA8bG9jYXRpb25faWQ+PC9sb2NhdGlvbl9pZD4KICAgIDxmaWVsZF93
b3JrZXJfaWQ+PC9maWVsZF93b3JrZXJfaWQ+CiAgICA8aW5kaXZpZHVhbF9pbmZvX2xhc3RfbmFt
ZT48L2luZGl2aWR1YWxfaW5mb19sYXN0X25hbWU+CiAgICA8aW5kaXZpZHVhbF9pbmZvX3BhcnRp
YWxfZGF0ZT48L2luZGl2aWR1YWxfaW5mb19wYXJ0aWFsX2RhdGU+CiAgICA8aW5kaXZpZHVhbF9p
bmZvX2ZhdGhlcl9pZD48L2luZGl2aWR1YWxfaW5mb19mYXRoZXJfaWQ+CjwvaW5taWdyYXRpb24+
Cg==</inboundTemplate>
        <outboundTemplate encoding="base64">PGlubWlncmF0aW9uPgogICAgPGNvbGxlY3RlZEJ5PgogICAgICAgIDxleHRJZD48L2V4dElkPgog
ICAgPC9jb2xsZWN0ZWRCeT4KICAgIDx2aXNpdD4KICAgICAgICA8ZXh0SWQ+PC9leHRJZD4KICAg
IDwvdmlzaXQ+CiAgICA8aW5kaXZpZHVhbD4KICAgICAgICA8ZXh0SWQ+PC9leHRJZD4KICAgICAg
ICA8Zmlyc3ROYW1lPjwvZmlyc3ROYW1lPgogICAgICAgIDxsYXN0TmFtZT48L2xhc3ROYW1lPgog
ICAgICAgIDxtaWRkbGVOYW1lPjwvbWlkZGxlTmFtZT4KICAgICAgICA8Z2VuZGVyPjwvZ2VuZGVy
PgogICAgICAgIDxkb2I+PC9kb2I+CgkJPGRvYkFzcGVjdD48L2RvYkFzcGVjdD4KICAgICAgICA8
bW90aGVyPgogICAgICAgICAgICA8ZXh0SWQ+PC9leHRJZD4KICAgICAgICA8L21vdGhlcj4KICAg
ICAgICA8ZmF0aGVyPgogICAgICAgICAgICA8ZXh0SWQ+PC9leHRJZD4KICAgICAgICA8L2ZhdGhl
cj4KICAgIDwvaW5kaXZpZHVhbD4KICAgIDxvcmlnaW4+PC9vcmlnaW4+CiAgICA8cmVhc29uPjwv
cmVhc29uPgogICAgPHJlY29yZGVkRGF0ZT48L3JlY29yZGVkRGF0ZT4KICAgIDxtaWdUeXBlPjwv
bWlnVHlwZT4KPC9pbm1pZ3JhdGlvbj4=</outboundTemplate>
        <inboundDataType>XML</inboundDataType>
        <outboundDataType>XML</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.2.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.2.1">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.2.1">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.2.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.2.1">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.2.1">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.2.1">
        <steps/>
        <inboundDataType>XML</inboundDataType>
        <outboundDataType>XML</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.2.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.2.1">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.2.1">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.2.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.2.1">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.2.1">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.2.1">
        <rules>
          <rule>
            <sequenceNumber>0</sequenceNumber>
            <name>New Rule</name>
            <data>
              <entry>
                <string>Script</string>
                <string>return msg[&quot;@event&quot;].toString() === &quot;external-inmigration&quot;;</string>
              </entry>
            </data>
            <type>JavaScript</type>
            <script>return msg[&quot;@event&quot;].toString() === &quot;external-inmigration&quot;;</script>
            <operator>NONE</operator>
          </rule>
        </rules>
      </filter>
      <transportName>HTTP Sender</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.2.1">
      <metaDataId>10</metaDataId>
      <name>Pregnancy Outcome</name>
      <properties class="com.mirth.connect.connectors.http.HttpDispatcherProperties" version="3.2.1">
        <pluginProperties/>
        <destinationConnectorProperties version="3.2.1">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>3000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-set">
            <string>Default Resource</string>
          </resourceIds>
        </destinationConnectorProperties>
        <host>${OPENHDS_PATH}/pregnancyoutcomes</host>
        <useProxyServer>false</useProxyServer>
        <proxyAddress></proxyAddress>
        <proxyPort></proxyPort>
        <method>post</method>
        <headers class="linked-hash-map"/>
        <parameters class="linked-hash-map"/>
        <responseXmlBody>false</responseXmlBody>
        <responseParseMultipart>true</responseParseMultipart>
        <responseIncludeMetadata>false</responseIncludeMetadata>
        <responseBinaryMimeTypes></responseBinaryMimeTypes>
        <responseBinaryMimeTypesRegex>false</responseBinaryMimeTypesRegex>
        <multipart>false</multipart>
        <useAuthentication>true</useAuthentication>
        <authenticationType>Basic</authenticationType>
        <usePreemptiveAuthentication>true</usePreemptiveAuthentication>
        <username>${OPENHDS_USER}</username>
        <password>${OPENHDS_PASSWORD}</password>
        <content>${message.transformedData}</content>
        <contentType>application/xml</contentType>
        <dataTypeBinary>false</dataTypeBinary>
        <charset>UTF-8</charset>
        <socketTimeout>30000</socketTimeout>
      </properties>
      <transformer version="3.2.1">
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>Pregnancy Outcome Transform</name>
            <script>// converts to OpenHDS pregnancy outcome XML
// basic fields
tmp[&apos;collectedBy&apos;][&apos;extId&apos;] = msg[&apos;field_worker_id&apos;].toString().toUpperCase();
tmp[&apos;visit&apos;][&apos;extId&apos;] = msg[&apos;visit_id&apos;].toString().toUpperCase();
tmp[&apos;outcomeDate&apos;] = msg[&apos;recorded_date&apos;].toString();
tmp[&apos;mother&apos;][&apos;extId&apos;] = msg[&apos;mother_id&apos;].toString().toUpperCase();
tmp[&apos;father&apos;][&apos;extId&apos;] = msg[&apos;father_id&apos;].toString().toUpperCase();

// outcomes
var outcomesXml = new XML(&quot;&lt;outcomes /&gt;&quot;);
var outcomes = msg[&apos;outcome&apos;].length();
for(var i = 0; i &lt; outcomes; i++) {
  outcomesXml.appendChild(new XML(&quot;&lt;outcome /&gt;&quot;));
  if (msg[&apos;outcome&apos;][i][&apos;outcome_type&apos;].toString() == &quot;LBR&quot;) {
    outcomesXml[&apos;outcome&apos;][i][&apos;type&apos;] = msg[&apos;outcome&apos;][i][&apos;outcome_type&apos;].toString();
    outcomesXml[&apos;outcome&apos;][i][&apos;child&apos;][&apos;extId&apos;] = msg[&apos;outcome&apos;][i][&apos;child_id&apos;].toString();
    outcomesXml[&apos;outcome&apos;][i][&apos;child&apos;][&apos;firstName&apos;] = msg[&apos;outcome&apos;][i][&apos;first_name&apos;].toString();
    outcomesXml[&apos;outcome&apos;][i][&apos;child&apos;][&apos;lastName&apos;] = msg[&apos;outcome&apos;][i][&apos;last_name&apos;].toString();
    outcomesXml[&apos;outcome&apos;][i][&apos;child&apos;][&apos;middleName&apos;] = msg[&apos;outcome&apos;][i][&apos;middle_name&apos;].toString();
    outcomesXml[&apos;outcome&apos;][i][&apos;child&apos;][&apos;gender&apos;] = msg[&apos;outcome&apos;][i][&apos;gender&apos;].toString();
    outcomesXml[&apos;outcome&apos;][i][&apos;child&apos;][&apos;partialDate&apos;] = msg[&apos;partial_date&apos;].toString();
    outcomesXml[&apos;outcome&apos;][i][&apos;childMembership&apos;][&apos;socialGroup&apos;][&apos;extId&apos;] = msg[&apos;outcome&apos;][i][&apos;social_group_id&apos;].toString()
    outcomesXml[&apos;outcome&apos;][i][&apos;childMembership&apos;][&apos;bIsToA&apos;] = (parseInt(msg[&apos;outcome&apos;][i][&apos;relationship_to_group_head&apos;])+ 1).toString();
  } else {
    outcomesXml[&apos;outcome&apos;][i][&apos;type&apos;] = msg[&apos;outcome&apos;][i][&apos;outcome_type&apos;].toString();
  }
}

tmp[&quot;outcomes&quot;] = outcomesXml;</script>
            <type>JavaScript</type>
            <data>
              <entry>
                <string>Script</string>
                <string>// converts to OpenHDS pregnancy outcome XML
// basic fields
tmp[&apos;collectedBy&apos;][&apos;extId&apos;] = msg[&apos;field_worker_id&apos;].toString().toUpperCase();
tmp[&apos;visit&apos;][&apos;extId&apos;] = msg[&apos;visit_id&apos;].toString().toUpperCase();
tmp[&apos;outcomeDate&apos;] = msg[&apos;recorded_date&apos;].toString();
tmp[&apos;mother&apos;][&apos;extId&apos;] = msg[&apos;mother_id&apos;].toString().toUpperCase();
tmp[&apos;father&apos;][&apos;extId&apos;] = msg[&apos;father_id&apos;].toString().toUpperCase();

// outcomes
var outcomesXml = new XML(&quot;&lt;outcomes /&gt;&quot;);
var outcomes = msg[&apos;outcome&apos;].length();
for(var i = 0; i &lt; outcomes; i++) {
  outcomesXml.appendChild(new XML(&quot;&lt;outcome /&gt;&quot;));
  if (msg[&apos;outcome&apos;][i][&apos;outcome_type&apos;].toString() == &quot;LBR&quot;) {
    outcomesXml[&apos;outcome&apos;][i][&apos;type&apos;] = msg[&apos;outcome&apos;][i][&apos;outcome_type&apos;].toString();
    outcomesXml[&apos;outcome&apos;][i][&apos;child&apos;][&apos;extId&apos;] = msg[&apos;outcome&apos;][i][&apos;child_id&apos;].toString();
    outcomesXml[&apos;outcome&apos;][i][&apos;child&apos;][&apos;firstName&apos;] = msg[&apos;outcome&apos;][i][&apos;first_name&apos;].toString();
    outcomesXml[&apos;outcome&apos;][i][&apos;child&apos;][&apos;lastName&apos;] = msg[&apos;outcome&apos;][i][&apos;last_name&apos;].toString();
    outcomesXml[&apos;outcome&apos;][i][&apos;child&apos;][&apos;middleName&apos;] = msg[&apos;outcome&apos;][i][&apos;middle_name&apos;].toString();
    outcomesXml[&apos;outcome&apos;][i][&apos;child&apos;][&apos;gender&apos;] = msg[&apos;outcome&apos;][i][&apos;gender&apos;].toString();
    outcomesXml[&apos;outcome&apos;][i][&apos;child&apos;][&apos;partialDate&apos;] = msg[&apos;partial_date&apos;].toString();
    outcomesXml[&apos;outcome&apos;][i][&apos;childMembership&apos;][&apos;socialGroup&apos;][&apos;extId&apos;] = msg[&apos;outcome&apos;][i][&apos;social_group_id&apos;].toString()
    outcomesXml[&apos;outcome&apos;][i][&apos;childMembership&apos;][&apos;bIsToA&apos;] = (parseInt(msg[&apos;outcome&apos;][i][&apos;relationship_to_group_head&apos;])+ 1).toString();
  } else {
    outcomesXml[&apos;outcome&apos;][i][&apos;type&apos;] = msg[&apos;outcome&apos;][i][&apos;outcome_type&apos;].toString();
  }
}

tmp[&quot;outcomes&quot;] = outcomesXml;</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64">PHByZWduYW5jeW91dGNvbWU+CiAgICA8X3VyaT48L191cmk+CiAgICA8dmlzaXRfaWQ+PC92aXNp
dF9pZD4KICAgIDxtb3RoZXJfaWQ+PC9tb3RoZXJfaWQ+CiAgICAgPHBhcnRpYWxfZGF0ZT48L3Bh
cnRpYWxfZGF0ZT4KICAgIDxmaWVsZF93b3JrZXJfaWQ+PC9maWVsZF93b3JrZXJfaWQ+CiAgICA8
cmVjb3JkZWRfZGF0ZT48L3JlY29yZGVkX2RhdGU+CiAgICA8ZmF0aGVyX2lkPjwvZmF0aGVyX2lk
PgogICAgPG91dGNvbWU+CiAgICAgICAgPG91dGNvbWVfdHlwZT48L291dGNvbWVfdHlwZT4KICAg
ICAgICA8Zmlyc3RfbmFtZT48L2ZpcnN0X25hbWU+CiAgICAgICAgPHNvY2lhbF9ncm91cF9pZD48
L3NvY2lhbF9ncm91cF9pZD4KICAgICAgICA8Z2VuZGVyPjwvZ2VuZGVyPgogICAgICAgIDxyZWxh
dGlvbnNoaXBfdG9fZ3JvdXBfaGVhZD48L3JlbGF0aW9uc2hpcF90b19ncm91cF9oZWFkPgogICAg
ICAgIDxjaGlsZF9pZD48L2NoaWxkX2lkPgogICAgICAgIDxsYXN0X25hbWU+PC9sYXN0X25hbWU+
CiAgICAgICAgPG1pZGRsZV9uYW1lPjwvbWlkZGxlX25hbWU+CiAgICA8L291dGNvbWU+CjwvcHJl
Z25hbmN5b3V0Y29tZT4=</inboundTemplate>
        <outboundTemplate encoding="base64">PHByZWduYW5jeW91dGNvbWU+CiAgICA8Y29sbGVjdGVkQnk+CiAgICAgICAgPGV4dElkPjwvZXh0
SWQ+CiAgICA8L2NvbGxlY3RlZEJ5PgogICAgPHZpc2l0PgogICAgICAgIDxleHRJZD48L2V4dElk
PgogICAgPC92aXNpdD4KICAgIDxvdXRjb21lRGF0ZT48L291dGNvbWVEYXRlPgogICAgPG1vdGhl
cj4KICAgICAgICA8ZXh0SWQ+PC9leHRJZD4KICAgIDwvbW90aGVyPgogICAgPGZhdGhlcj4KICAg
ICAgICA8ZXh0SWQ+PC9leHRJZD4KICAgIDwvZmF0aGVyPgogICAgPG91dGNvbWVzPgogICAgICAg
IDxvdXRjb21lPgogICAgICAgICAgICA8dHlwZT48L3R5cGU+CiAgICAgICAgICAgIDxjaGlsZD4K
ICAgICAgICAgICAgICAgIDxleHRJZD48L2V4dElkPgogICAgICAgICAgICAgICAgPGZpcnN0TmFt
ZT48L2ZpcnN0TmFtZT4KICAgICAgICAgICAgICAgIDxsYXN0TmFtZT48L2xhc3ROYW1lPgogICAg
ICAgICAgICAgICAgPG1pZGRsZU5hbWU+PC9taWRkbGVOYW1lPgogICAgICAgICAgICAgICAgPGdl
bmRlcj48L2dlbmRlcj4KICAgICAgICAgICAgPC9jaGlsZD4KICAgICAgICAgICAgPGNoaWxkTWVt
YmVyc2hpcD4KICAgICAgICAgICAgICAgIDxzb2NpYWxHcm91cD4KICAgICAgICAgICAgICAgICAg
ICA8ZXh0SWQ+PC9leHRJZD4KICAgICAgICAgICAgICAgIDwvc29jaWFsR3JvdXA+CiAgICAgICAg
ICAgICAgICA8YklzVG9BPjwvYklzVG9BPgogICAgICAgICAgICA8L2NoaWxkTWVtYmVyc2hpcD4K
ICAgICAgICA8L291dGNvbWU+CiAgICA8L291dGNvbWVzPgo8L3ByZWduYW5jeW91dGNvbWU+</outboundTemplate>
        <inboundDataType>XML</inboundDataType>
        <outboundDataType>XML</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.2.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.2.1">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.2.1">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.2.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.2.1">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.2.1">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.2.1">
        <steps/>
        <inboundDataType>XML</inboundDataType>
        <outboundDataType>XML</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.2.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.2.1">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.2.1">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.2.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.2.1">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.2.1">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.2.1">
        <rules>
          <rule>
            <sequenceNumber>0</sequenceNumber>
            <name>New Rule</name>
            <data>
              <entry>
                <string>Script</string>
                <string>return msg[&quot;@event&quot;].toString() === &quot;pregnancyoutcome&quot;;</string>
              </entry>
            </data>
            <type>JavaScript</type>
            <script>return msg[&quot;@event&quot;].toString() === &quot;pregnancyoutcome&quot;;</script>
            <operator>NONE</operator>
          </rule>
        </rules>
      </filter>
      <transportName>HTTP Sender</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.2.1">
      <metaDataId>4</metaDataId>
      <name>Death of Head of Household</name>
      <properties class="com.mirth.connect.connectors.http.HttpDispatcherProperties" version="3.2.1">
        <pluginProperties/>
        <destinationConnectorProperties version="3.2.1">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-set">
            <string>Default Resource</string>
          </resourceIds>
        </destinationConnectorProperties>
        <host>${OPENHDS_PATH}/hoh</host>
        <useProxyServer>false</useProxyServer>
        <proxyAddress></proxyAddress>
        <proxyPort></proxyPort>
        <method>post</method>
        <headers class="linked-hash-map"/>
        <parameters class="linked-hash-map"/>
        <responseXmlBody>false</responseXmlBody>
        <responseParseMultipart>true</responseParseMultipart>
        <responseIncludeMetadata>false</responseIncludeMetadata>
        <responseBinaryMimeTypes></responseBinaryMimeTypes>
        <responseBinaryMimeTypesRegex>false</responseBinaryMimeTypesRegex>
        <multipart>false</multipart>
        <useAuthentication>true</useAuthentication>
        <authenticationType>Basic</authenticationType>
        <usePreemptiveAuthentication>true</usePreemptiveAuthentication>
        <username>${OPENHDS_USER}</username>
        <password>${OPENHDS_PASSWORD}</password>
        <content>${message.transformedData}</content>
        <contentType>application/xml</contentType>
        <dataTypeBinary>false</dataTypeBinary>
        <charset>UTF-8</charset>
        <socketTimeout>30000</socketTimeout>
      </properties>
      <transformer version="3.2.1">
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>Death of Household transforms</name>
            <script>tmp[&apos;collectedBy&apos;][&apos;extId&apos;] = msg[&apos;field_worker_id&apos;].toString().toUpperCase();
tmp[&apos;visit&apos;][&apos;extId&apos;] = msg[&apos;visit_id&apos;].toString().toUpperCase();
tmp[&apos;newHoh&apos;][&apos;extId&apos;] = msg[&apos;new_hoh_id&apos;].toString().toUpperCase();
tmp[&apos;oldHoh&apos;][&apos;extId&apos;] = msg[&apos;individual_id&apos;].toString().toUpperCase();
tmp[&apos;socialGroup&apos;][&apos;extId&apos;] = msg[&apos;household_id&apos;].toString().toUpperCase();

//DEATH
tmp[&apos;death&apos;][&apos;visitDeath&apos;][&apos;extId&apos;] = msg[&apos;visit_id&apos;].toString().toUpperCase();
tmp[&apos;death&apos;][&apos;individual&apos;][&apos;extId&apos;] = msg[&apos;individual_id&apos;].toString().toUpperCase();
tmp[&apos;death&apos;][&apos;deathPlace&apos;] = msg[&apos;place_of_death&apos;].toString();
tmp[&apos;death&apos;][&apos;deathCause&apos;] = msg[&apos;causeofdeathdiagnosed&apos;].toString();
tmp[&apos;death&apos;][&apos;deathDate&apos;] = msg[&apos;date&apos;].toString();
tmp[&apos;death&apos;][&apos;collectedBy&apos;][&apos;extId&apos;] = msg[&apos;field_worker_id&apos;].toString().toUpperCase();

var relationsXml = new XML(&quot;&lt;memberships /&gt;&quot;);
var relations = msg[&apos;relation&apos;].length();
for(var i = 0; i &lt; relations; i++){
	relationsXml.appendChild(new XML(&quot;&lt;membership /&gt;&quot;));
	relationsXml[&apos;membership&apos;][i][&apos;bIsToA&apos;] = msg[&apos;relation&apos;][i][&apos;relationship_to_group_head&apos;].toString();
	relationsXml[&apos;membership&apos;][i][&apos;individual&apos;][&apos;extId&apos;] = msg[&apos;relation&apos;][i][&apos;ext_id&apos;].toString().toUpperCase();
	relationsXml[&apos;membership&apos;][i][&apos;socialGroup&apos;][&apos;extId&apos;] = msg[&apos;relation&apos;][i][&apos;social_group_id&apos;].toString().toUpperCase();
}

tmp[&apos;memberships&apos;] = relationsXml;</script>
            <type>JavaScript</type>
            <data>
              <entry>
                <string>Script</string>
                <string>tmp[&apos;collectedBy&apos;][&apos;extId&apos;] = msg[&apos;field_worker_id&apos;].toString().toUpperCase();
tmp[&apos;visit&apos;][&apos;extId&apos;] = msg[&apos;visit_id&apos;].toString().toUpperCase();
tmp[&apos;newHoh&apos;][&apos;extId&apos;] = msg[&apos;new_hoh_id&apos;].toString().toUpperCase();
tmp[&apos;oldHoh&apos;][&apos;extId&apos;] = msg[&apos;individual_id&apos;].toString().toUpperCase();
tmp[&apos;socialGroup&apos;][&apos;extId&apos;] = msg[&apos;household_id&apos;].toString().toUpperCase();

//DEATH
tmp[&apos;death&apos;][&apos;visitDeath&apos;][&apos;extId&apos;] = msg[&apos;visit_id&apos;].toString().toUpperCase();
tmp[&apos;death&apos;][&apos;individual&apos;][&apos;extId&apos;] = msg[&apos;individual_id&apos;].toString().toUpperCase();
tmp[&apos;death&apos;][&apos;deathPlace&apos;] = msg[&apos;place_of_death&apos;].toString();
tmp[&apos;death&apos;][&apos;deathCause&apos;] = msg[&apos;causeofdeathdiagnosed&apos;].toString();
tmp[&apos;death&apos;][&apos;deathDate&apos;] = msg[&apos;date&apos;].toString();
tmp[&apos;death&apos;][&apos;collectedBy&apos;][&apos;extId&apos;] = msg[&apos;field_worker_id&apos;].toString().toUpperCase();

var relationsXml = new XML(&quot;&lt;memberships /&gt;&quot;);
var relations = msg[&apos;relation&apos;].length();
for(var i = 0; i &lt; relations; i++){
	relationsXml.appendChild(new XML(&quot;&lt;membership /&gt;&quot;));
	relationsXml[&apos;membership&apos;][i][&apos;bIsToA&apos;] = msg[&apos;relation&apos;][i][&apos;relationship_to_group_head&apos;].toString();
	relationsXml[&apos;membership&apos;][i][&apos;individual&apos;][&apos;extId&apos;] = msg[&apos;relation&apos;][i][&apos;ext_id&apos;].toString().toUpperCase();
	relationsXml[&apos;membership&apos;][i][&apos;socialGroup&apos;][&apos;extId&apos;] = msg[&apos;relation&apos;][i][&apos;social_group_id&apos;].toString().toUpperCase();
}

tmp[&apos;memberships&apos;] = relationsXml;</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64">PGRlYXRoSG9IPg0KICAgIDxfdXJpPjwvX3VyaT4NCiAgICA8dmlzaXRfaWQ+PC92aXNpdF9pZD4N
CiAgICA8ZmllbGRfd29ya2VyX2lkPjwvZmllbGRfd29ya2VyX2lkPg0KICAgIDxuZXdfaG9oX2lk
PjwvbmV3X2hvaF9pZD4NCiAgICA8aW5kaXZpZHVhbF9pZD48L2luZGl2aWR1YWxfaWQ+DQoJPGhv
dXNlaG9sZF9pZD48L2hvdXNlaG9sZF9pZD4KCTxwbGFjZV9vZl9kZWF0aD48L3BsYWNlX29mX2Rl
YXRoPgoJPHdob20+PC93aG9tPgoJPGRpYWdub3NlZGRlYXRoPjwvZGlhZ25vc2VkZGVhdGg+Cgk8
b3RoZXJwbGFjZV9vZl9kZWF0aD48L290aGVycGxhY2Vfb2ZfZGVhdGg+Cgk8Y2F1c2VvZmRlYXRo
ZGlhZ25vc2VkPjwvY2F1c2VvZmRlYXRoZGlhZ25vc2VkPgoJPGRhdGU+PC9kYXRlPgoJPGNhdXNl
b2ZkZWF0aG5vdGRpYWdub3NlZD48L2NhdXNlb2ZkZWF0aG5vdGRpYWdub3NlZD4KICAgIDxyZWxh
dGlvbj4NCiAgICAgICAgPG1lbWJlcl9uYW1lPjwvbWVtYmVyX25hbWU+DQogICAgICAgIDxyZWxh
dGlvbnNoaXBfdG9fZ3JvdXBfaGVhZD48L3JlbGF0aW9uc2hpcF90b19ncm91cF9oZWFkPg0KICAg
ICAgICA8ZXh0X2lkPjwvZXh0X2lkPg0KICAgICAgICA8c29jaWFsX2dyb3VwX2lkPjwvc29jaWFs
X2dyb3VwX2lkPg0KICAgIDwvcmVsYXRpb24+DQo8L2RlYXRoSG9IPg==</inboundTemplate>
        <outboundTemplate encoding="base64">PGRlYXRoX29mX2hoPg0KICAgIDxjb2xsZWN0ZWRCeT4KCQk8ZXh0SWQ+PC9leHRJZD4KCTwvY29s
bGVjdGVkQnk+CiAgICA8dmlzaXQ+CgkJPGV4dElkPjwvZXh0SWQ+Cgk8L3Zpc2l0Pg0KICAgIDxu
ZXdIb2g+CgkJPGV4dElkPjwvZXh0SWQ+Cgk8L25ld0hvaD4NCiAgICA8b2xkSG9oPgoJCTxleHRJ
ZD48L2V4dElkPgoJPC9vbGRIb2g+DQoJPHNvY2lhbEdyb3VwPgoJCTxleHRJZD48L2V4dElkPgoJ
PC9zb2NpYWxHcm91cD4KCTxkZWF0aD4KICAJCTx2aXNpdERlYXRoPgogICAJCQk8ZXh0SWQ+PC9l
eHRJZD4KCQk8L3Zpc2l0RGVhdGg+CgkJPGluZGl2aWR1YWw+CgkgICAgCTxleHRJZD48L2V4dElk
PgoJCTwvaW5kaXZpZHVhbD4KCQk8ZGVhdGhQbGFjZT48L2RlYXRoUGxhY2U+CgkJPGRlYXRoQ2F1
c2U+PC9kZWF0aENhdXNlPgoJCTxkZWF0aERhdGU+PC9kZWF0aERhdGU+CgkJPGNvbGxlY3RlZEJ5
PgogICAgCQk8ZXh0SWQ+PC9leHRJZD4KCQk8L2NvbGxlY3RlZEJ5PgoJPC9kZWF0aD4JCgk8bWVt
YmVyc2hpcHM+CiAgICAJPG1lbWJlcnNoaXA+DQoJICAgICAgICA8YklzVG9BPjwvYklzVG9BPg0K
ICAgIAkgICAgPGluZGl2aWR1YWw+CgkJCQk8ZXh0SWQ+PC9leHRJZD4KCQkJPC9pbmRpdmlkdWFs
PgogICAgICAgIAk8c29jaWFsR3JvdXA+CgkJCQk8ZXh0SWQ+PC9leHRJZD4KCQkJPC9zb2NpYWxH
cm91cD4NCgkgICAgPC9tZW1iZXJzaGlwPg0KCTwvbWVtYmVyc2hpcHM+CjwvZGVhdGhfb2ZfaGg+
</outboundTemplate>
        <inboundDataType>XML</inboundDataType>
        <outboundDataType>XML</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.2.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.2.1">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.2.1">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.2.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.2.1">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.2.1">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.2.1">
        <steps/>
        <inboundDataType>XML</inboundDataType>
        <outboundDataType>XML</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.2.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.2.1">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.2.1">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.2.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.2.1">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.2.1">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.2.1">
        <rules>
          <rule>
            <sequenceNumber>0</sequenceNumber>
            <name>New Rule</name>
            <data>
              <entry>
                <string>Script</string>
                <string>return msg[&quot;@event&quot;].toString() === &quot;deathofhousehold&quot;;</string>
              </entry>
            </data>
            <type>JavaScript</type>
            <script>return msg[&quot;@event&quot;].toString() === &quot;deathofhousehold&quot;;</script>
            <operator>NONE</operator>
          </rule>
        </rules>
      </filter>
      <transportName>HTTP Sender</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
  </destinationConnectors>
  <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
  <postprocessingScript>// This script executes once after a message has been processed

// update the database record to mark it as being processed by mirth
var status=1;

var i = responseMap.size();
for ( var k=0; k&lt;i; k++) {
	var j=k+1;
	connectorMessage = message.getConnectorMessages().get(j);
	if (responseMap.get(&quot;d&quot;+j).getStatus().toString()==&quot;ERROR&quot; &amp;&amp; connectorMessage.getConnectorName()!=&apos;Visit&apos;) {
		status=2;
	    globalMap.put(&quot;channelError&quot;, connectorMessage.getConnectorName());
	    globalMap.put(&quot;requestError&quot;, responseMap.get(&quot;d&quot;+j).getMessage());
		globalMap.put(&quot;transformed&quot;, connectorMessage.getTransformedData());


	}
	markRecordAsProcessed(connectorMessage.getRawData(),status);
	
}
return;



</postprocessingScript>
  <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
  <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
  <properties version="3.2.1">
    <clearGlobalChannelMap>true</clearGlobalChannelMap>
    <messageStorageMode>PRODUCTION</messageStorageMode>
    <encryptData>false</encryptData>
    <removeContentOnCompletion>false</removeContentOnCompletion>
    <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
    <initialState>STOPPED</initialState>
    <storeAttachments>false</storeAttachments>
    <tags class="linked-hash-set"/>
    <metaDataColumns>
      <metaDataColumn>
        <name>SOURCE</name>
        <type>STRING</type>
        <mappingName>mirth_source</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>TYPE</name>
        <type>STRING</type>
        <mappingName>mirth_type</mappingName>
      </metaDataColumn>
    </metaDataColumns>
    <attachmentProperties>
      <type>None</type>
      <properties/>
    </attachmentProperties>
    <pruneMetaDataDays>45</pruneMetaDataDays>
    <pruneContentDays>45</pruneContentDays>
    <archiveEnabled>true</archiveEnabled>
    <resourceIds class="linked-hash-set">
      <string>Default Resource</string>
    </resourceIds>
  </properties>
</channel>