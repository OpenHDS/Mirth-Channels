<list>
  <codeTemplate version="3.1.1">
    <id>00523e00-7a86-40fc-b07a-dd85cb372261</id>
    <name>Result Set to Forms List</name>
    <tooltip>Transforms a ResultSet to a List of XML forms representing as strings</tooltip>
    <code>function resultsToForms(results, xmlElement) {
  var forms = new java.util.ArrayList();
  while(results.next()) {
    var xml = resultSetToXml(results, xmlElement)
    forms.add(xml.toString());
  }
 
  return forms;
}</code>
    <type>FUNCTION</type>
    <scope>0</scope>
  </codeTemplate>
  <codeTemplate version="3.1.1">
    <id>0e093113-2971-4efa-bdbc-6b6b7350a1a3</id>
    <name>Retrieve Out Migration Forms</name>
    <tooltip>Reads Out Migrations from the database</tooltip>
    <code>function addOutMigrations(visitId, dbConn) {
  var results = dbConn.executeCachedQuery(&quot;SELECT _URI, OPENHDS_VISIT_ID, NAME_OF_DESTINATION, OPENHDS_FIELD_WORKER_ID, DATE_OF_MIGRATION, REASON_FOR_OUT_MIGRATION, OPENHDS_INDIVIDUAL_ID FROM &quot; + globalMap.get(&quot;OUT_MIGRATION_TABLE&quot;) + &quot; WHERE OPENHDS_VISIT_ID = &apos;&quot; + visitId + &quot;&apos; AND processed_by_mirth =0&quot;);
  var forms = resultsToForms(results, &quot;&lt;outmigration event=&apos;outmigration&apos; table-name=&apos;&quot; + globalMap.get(&quot;OUT_MIGRATION_TABLE&quot;) + &quot;&apos; /&gt;&quot;);
  return forms;
}</code>
    <type>FUNCTION</type>
    <scope>0</scope>
  </codeTemplate>
  <codeTemplate version="3.1.1">
    <id>2201f0fc-f3bd-4058-a83d-0df9359ee211</id>
    <name>Retrieve Death of HoH</name>
    <tooltip>Retrieve the Death of Head of Households</tooltip>
    <code>function addHoHDeaths(visitId, dbConn) {
	var deathToHoHForm = new java.util.ArrayList();
	var results = dbConn.executeCachedQuery(&quot;SELECT _URI, OPENHDS_VISIT_ID, OPENHDS_FIELD_WORKER_ID, OPENHDS_NEW_HOH_ID, OPENHDS_INDIVIDUAL_ID, OPENHDS_HOUSEHOLD_ID, PLACE_OF_DEATH,  DATE, CAUSE_OF_DEATH FROM &quot; + globalMap.get(&quot;DEATH_TOHOH_TABLE&quot;) + &quot; WHERE OPENHDS_VISIT_ID = &apos;&quot; + visitId + &quot;&apos; AND processed_by_mirth is null OR processed_by_mirth = 0&quot;);
	while(results.next()) {
    	var deathHoh = resultSetToXml(results, &quot;&lt;deathHoH event=&apos;deathofhousehold&apos; table-name=&apos;&quot; + globalMap.get(&quot;DEATH_TOHOH_TABLE&quot;) + &quot;&apos; /&gt;&quot;);

	    var relations = dbConn.executeCachedQuery(&quot;SELECT MEMBER_NAME, RELATIONSHIP_TO_GROUP_HEAD, EXT_ID, SOCIAL_GROUP_ID FROM &quot; + globalMap.get(&quot;DEATH_HOH_RELATIONS&quot;) + &quot; WHERE _PARENT_AURI = &apos;&quot; + deathHoh[&quot;_uri&quot;].toString() + &quot;&apos;&quot;);
    	
		while(relations.next()) {
      		var relation = resultSetToXml(relations, &quot;&lt;relation /&gt;&quot;);
		    deathHoh.appendChild(relation);
    	}
	    deathToHoHForm.add(deathHoh.toString());
	}
	return deathToHoHForm;
}</code>
    <type>FUNCTION</type>
    <scope>0</scope>
  </codeTemplate>
  <codeTemplate version="3.1.1">
    <id>286839da-5111-4bf4-b0db-a3a451b620a9</id>
    <name>Retrieve OutMigration from IM</name>
    <tooltip></tooltip>
    <code>function addOutMigrationsIM(visitId, dbConn) {

var results = dbConn.executeCachedQuery(&quot;SELECT _URI, OPENHDS_VISIT_ID, OPENHDS_LOCATION_ID NAME_OF_DESTINATION, OPENHDS_FIELD_WORKER_ID, DATE_SUB(DATE_OF_MIGRATION, INTERVAL 1 DAY) DATE_OF_MIGRATION, REASON as REASON_FOR_OUT_MIGRATION, INDIVIDUAL_INFO_INDIVIDUAL_ID as INDIVIDUAL_ID FROM &quot; + globalMap.get(&quot;IN_MIGRATION_TABLE&quot;) + &quot; WHERE OPENHDS_VISIT_ID = &apos;&quot; + visitId + &quot;&apos; AND openhds_migration_type = &apos;INTERNAL_INMIGRATION&apos; AND processed_by_mirth =0 and INDIVIDUAL_INFO_INDIVIDUAL_ID not in (select OPENHDS_INDIVIDUAL_ID FROM &quot; + globalMap.get(&quot;OUT_MIGRATION_TABLE&quot;)+&quot;)&quot;);  

var forms = resultsToForms(results, &quot;&lt;outmigration event=&apos;outmigrationIM&apos; table-name=&apos;OMGIM&apos; /&gt;&quot;);
  return forms;
}</code>
    <type>FUNCTION</type>
    <scope>0</scope>
  </codeTemplate>
  <codeTemplate version="3.1.1">
    <id>41cb0d6e-16a9-4331-a094-3d26bc95343d</id>
    <name>ExtraForm::Get Core Table Structure</name>
    <tooltip>Extracts the Table Structure from a given ExtraForm Core Table and returns a JS Array with the info about each of its columns</tooltip>
    <code>// modify function_name and parameters as you wish.
// one function per template is recommended. i.e.) create a new code template for each new function.
function getCoreTableStructure(CORE_TABLE_NAME){
	var listOfObjects = [];
	var connection;
	try {
		connection = DatabaseConnectionFactory.createConnection(&apos;com.mysql.jdbc.Driver&apos;,globalMap.get(&quot;ODK_DATABASE_URL&quot;), globalMap.get(&quot;ODK_DATABASE_USER&quot;),globalMap.get(&quot;ODK_DATABASE_PASSWORD&quot;));
		var metaData = connection.getMetaData();	
		var result;
		try { 
			result = metaData.getColumns(null, null, CORE_TABLE_NAME, null);
			var counter = 1;
			while (result.next()) {		
				var columnName = result.getString(&quot;COLUMN_NAME&quot;);
				var defaultValue = result.getString(&quot;COLUMN_DEF&quot;);
				var dataType = result.getInt(&quot;DATA_TYPE&quot;);
				var typeName = result.getString(&quot;TYPE_NAME&quot;);
				var nullable = result.getInt(&quot;NULLABLE&quot;);
				var columnSize = result.getInt(&quot;COLUMN_SIZE&quot;);

				var ColumnDummy = {
					&apos;name&apos; : columnName, 
					&apos;type&apos; : typeName,
					&apos;default_value&apos; : defaultValue,
					&apos;size&apos; : columnSize,
					&apos;allow_null&apos; : (nullable == java.sql.ResultSetMetaData.columnNoNulls)?&quot;false&quot;:&quot;true&quot;
				}
				listOfObjects.push(ColumnDummy);
				counter++;
			}
		}
		finally {
			if(result){
				result.close();
			}
		}
	} finally {
		if (connection) { 
			connection.close();
		}
	}
	return listOfObjects;
}</code>
    <type>FUNCTION</type>
    <scope>0</scope>
  </codeTemplate>
  <codeTemplate version="3.1.1">
    <id>4e1616a1-7ed4-4f52-b32a-e1ea48b2eaa2</id>
    <name>Retrieve Pregnancy Outcome Forms</name>
    <tooltip>Retrieve Pregnancy Outcome Forms</tooltip>
    <code>// this is the most complicated function for retrieving forms
// the following assumptions were made when writing this function:
// In Migrations will be processed before pregnancy outcomes. 
// This ensures if a women has in migrated, the individual will be created in the system before the pregnancy outcome
// Also, it&apos;s possible this pregnancy outcome depends 
function addPregnancyOutcomes(visitId, dbConn) {
  var forms = new java.util.ArrayList();
  var results = dbConn.executeCachedQuery(&quot;SELECT _URI, OPENHDS_VISIT_ID, OPENHDS_MOTHER_ID, PARTIAL_DATE, OPENHDS_FIELD_WORKER_ID, RECORDED_DATE, OPENHDS_FATHER_ID FROM &quot; + globalMap.get(&quot;PREGNANCY_OUTCOME_TABLE&quot;) + &quot; WHERE OPENHDS_VISIT_ID = &apos;&quot; + visitId + &quot;&apos; AND processed_by_mirth =0&quot;);
  while(results.next()) {
    var pregOut = resultSetToXml(results, &quot;&lt;pregnancyoutcome event=&apos;pregnancyoutcome&apos; table-name=&apos;&quot; + globalMap.get(&quot;PREGNANCY_OUTCOME_TABLE&quot;) + &quot;&apos; /&gt;&quot;);
    // are there any outcomes for this pregnancy outcome?
    var outcomes = dbConn.executeCachedQuery(&quot;SELECT OUTCOME_TYPE, FIRST_NAME, SOCIAL_GROUP_ID, GENDER, RELATIONSHIP_TO_GROUP_HEAD, CHILD_ID, LAST_NAME, MIDDLE_NAME FROM &quot; + globalMap.get(&quot;OUTCOMES_TABLE&quot;) + &quot; WHERE _PARENT_AURI = &apos;&quot; + pregOut[&quot;_uri&quot;].toString() + &quot;&apos;&quot;);
    while(outcomes.next()) {
      var outcome = resultSetToXml(outcomes, &quot;&lt;outcome /&gt;&quot;);
      pregOut.appendChild(outcome);
    }

    forms.add(pregOut.toString());
  }

  return forms;
}
</code>
    <type>FUNCTION</type>
    <scope>0</scope>
  </codeTemplate>
  <codeTemplate version="3.1.1">
    <id>4f519d07-5871-49f1-98b8-7731eb918dcc</id>
    <name>ExtraForm::getCoreTableFromFormName</name>
    <tooltip>Extract the Core Table name for a given formId in the ODK database</tooltip>
    <code>// modify function_name and parameters as you wish.
// one function per template is recommended. i.e.) create a new code template for each new function.
function getCoreTableFromFormName(extraFormName){		
	var tableName;
	var sql = &quot;SELECT _CREATION_DATE, SUBMISSION_FORM_ID, URI_SUBMISSION_DATA_MODEL FROM _form_info_submission_association&quot;;
		
	var connection;
	try {
		connection = DatabaseConnectionFactory.createConnection(&apos;com.mysql.jdbc.Driver&apos;,globalMap.get(&quot;ODK_DATABASE_URL&quot;), globalMap.get(&quot;ODK_DATABASE_USER&quot;),globalMap.get(&quot;ODK_DATABASE_PASSWORD&quot;));

		var stmt = connection.createStatement(); 
		var rs = stmt.executeQuery(sql);
  
		while (rs.next()) {
			var c = rs.getString(&quot;_CREATION_DATE&quot;);
			var form = rs.getString(&quot;SUBMISSION_FORM_ID&quot;);
			var uri = rs.getString(&quot;URI_SUBMISSION_DATA_MODEL&quot;);
		        
			if(form.equalsIgnoreCase(extraFormName)){		        		
		    	tableName = processForm(uri);
		 	}
		}		    
	} catch (e) {
	}
	finally{
		if(connection){
			connection.close();
		}
	}
	return tableName;
}</code>
    <type>FUNCTION</type>
    <scope>0</scope>
  </codeTemplate>
  <codeTemplate version="3.1.1">
    <id>5b7999dc-5f95-4f03-82d9-84cc8fc8b6a1</id>
    <name>ResetProcessedErrored</name>
    <tooltip></tooltip>
    <code>// modify function_name and parameters as you wish.
// one function per template is recommended. i.e.) create a new code template for each new function.
function resetProcessedErrored() {

var dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;com.mysql.jdbc.Driver&apos;, globalMap.get(&quot;ODK_DATABASE_URL&quot;), globalMap.get(&quot;ODK_DATABASE_USER&quot;), globalMap.get(&quot;ODK_DATABASE_PASSWORD&quot;));
  
dbConn.executeUpdate(&quot;update VISIT_REGISTRATION_CORE set PROCESSED_BY_MIRTH=false where OPENHDS_VISIT_ID IN (select distinct OPENHDS_VISIT_ID from PREGNANCY_OBSERVATION_CORE where PROCESSED_BY_MIRTH =0)&quot;);
dbConn.executeUpdate(&quot;update VISIT_REGISTRATION_CORE set PROCESSED_BY_MIRTH=false where OPENHDS_VISIT_ID IN (select distinct OPENHDS_VISIT_ID from PREGNANCY_OUTCOME_CORE where PROCESSED_BY_MIRTH =0)&quot;);
dbConn.executeUpdate(&quot;update VISIT_REGISTRATION_CORE set PROCESSED_BY_MIRTH=false where OPENHDS_VISIT_ID IN (select distinct OPENHDS_VISIT_ID from IN_MIGRATION_CORE where PROCESSED_BY_MIRTH =0)&quot;);
dbConn.executeUpdate(&quot;update VISIT_REGISTRATION_CORE set PROCESSED_BY_MIRTH=false where OPENHDS_VISIT_ID IN (select distinct OPENHDS_VISIT_ID from DEATH_REGISTRATION_CORE where PROCESSED_BY_MIRTH =0)&quot;);
dbConn.executeUpdate(&quot;update VISIT_REGISTRATION_CORE set PROCESSED_BY_MIRTH=false where OPENHDS_VISIT_ID IN (select distinct OPENHDS_VISIT_ID from OUT_MIGRATION_REGISTRATION_CORE where PROCESSED_BY_MIRTH =0)&quot;);
dbConn.executeUpdate(&quot;update VISIT_REGISTRATION_CORE set PROCESSED_BY_MIRTH=false where OPENHDS_LOCATION_ID IN (select OPENHDS_LOCATION_ID from LOCATION_REGISTRATION_CORE where PROCESSED_BY_MIRTH =0)&quot;);  
dbConn.close();  

}</code>
    <type>FUNCTION</type>
    <scope>0</scope>
  </codeTemplate>
  <codeTemplate version="3.1.1">
    <id>609da872-981f-472d-9fef-fe6d61f031c7</id>
    <name>Retrieve Baseline Form</name>
    <tooltip></tooltip>
    <code>function addBaseline(visitId, dbConn) {
  var results = dbConn.executeCachedQuery(&quot;SELECT _URI, INDIVIDUAL_INFO_DATE_OF_BIRTH, DATE_OF_MIGRATION, INDIVIDUAL_INFO_FIRST_NAME, INDIVIDUAL_INFO_MOTHER_ID, INDIVIDUAL_INFO_INDIVIDUAL_ID, OPENHDS_VISIT_ID, INDIVIDUAL_INFO_GENDER, OPENHDS_LOCATION_ID, OPENHDS_FIELD_WORKER_ID, INDIVIDUAL_INFO_LAST_NAME, INDIVIDUAL_INFO_PARTIAL_DATE, INDIVIDUAL_INFO_FATHER_ID, INDIVIDUAL_INFO_MIDDLE_NAME FROM &quot; + globalMap.get(&quot;BASELINE_TABLE&quot;) + &quot; WHERE OPENHDS_VISIT_ID = &apos;&quot; + visitId + &quot;&apos; AND openhds_migration_type = &apos;BASELINE&apos; AND processed_by_mirth=0 order by INDIVIDUAL_INFO_DATE_OF_BIRTH ASC&quot;);
  var baselineForms = resultsToForms(results, &quot;&lt;baseline event=&apos;baseline&apos; table-name=&apos;&quot; + globalMap.get(&quot;BASELINE_TABLE&quot;) + &quot;&apos;/&gt;&quot;);
  return baselineForms;
}</code>
    <type>FUNCTION</type>
    <scope>0</scope>
  </codeTemplate>
  <codeTemplate version="3.1.1">
    <id>612198b9-5430-4ea0-b473-a61903ef82dc</id>
    <name>ExtraForm::processForm</name>
    <tooltip>Helper function to extract the Core Table Name from a given form URI in the ODK database</tooltip>
    <code>// modify function_name and parameters as you wish.
// one function per template is recommended. i.e.) create a new code template for each new function.
function processForm(uri){
	var tableNameResult = null; 
	var sql = &quot;SELECT _URI, ELEMENT_TYPE, PERSIST_AS_TABLE_NAME, ELEMENT_NAME, PERSIST_AS_COLUMN_NAME, PARENT_URI_FORM_DATA_MODEL FROM _form_data_model WHERE URI_SUBMISSION_DATA_MODEL = ?&quot;;
		
	var connection;
	try{
			connection = DatabaseConnectionFactory.createConnection(&apos;com.mysql.jdbc.Driver&apos;, globalMap.get(&quot;ODK_DATABASE_URL&quot;), globalMap.get(&quot;ODK_DATABASE_USER&quot;),globalMap.get(&quot;ODK_DATABASE_PASSWORD&quot;));
			var ps = connection.prepareStatement(sql);
			ps.setString(1, uri);
			
			var rs;
			try{
				var rs = ps.executeQuery();

			    if (rs.next()) {
			    	var elementType = rs.getString(&quot;ELEMENT_TYPE&quot;);
			    	var columnName = rs.getString(&quot;PERSIST_AS_COLUMN_NAME&quot;);
			    	var element_uri = rs.getString(&quot;_URI&quot;);
			    	var parent_uri = rs.getString(&quot;PARENT_URI_FORM_DATA_MODEL&quot;);
			    	var tableName = rs.getString(&quot;PERSIST_AS_TABLE_NAME&quot;);
			    	var elementName = rs.getString(&quot;ELEMENT_NAME&quot;);
			    	
			    	// Check for starting group 	
			    	if(parent_uri.equals(uri) &amp;&amp; elementType.equalsIgnoreCase(&quot;GROUP&quot;) &amp;&amp; (columnName == null)){
			    		tableNameResult = tableName;
			    	}
			    }
			}
			catch(e){
			}
			finally{
				if(rs != null)
					rs.close();
			}
		}
		catch(e){
		}
		finally{
			if(connection != null)
				connection.close();
		}
		return tableNameResult;
	}</code>
    <type>FUNCTION</type>
    <scope>0</scope>
  </codeTemplate>
  <codeTemplate version="3.1.1">
    <id>62092782-50c9-4182-a310-439da6c7cfa4</id>
    <name>ExtraForm::createTableDummy</name>
    <tooltip>Create XML from JS Array containing Information about odk extraform table structure</tooltip>
    <code>// modify function_name and parameters as you wish.
// one function per template is recommended. i.e.) create a new code template for each new function.
function createTableDummy(CORE_TABLE_NAME, uuid, primaryKey, listOfObjects){
	var table = &lt;table key={uuid} name={CORE_TABLE_NAME} primaryKey={primaryKey} /&gt;;

	/* CREATE XML FROM JS ARRAY */
	if(listOfObjects.length &gt; 0){
		var columns = &lt;&gt;&lt;/&gt;;

		listOfObjects.forEach(function(entry) {
			var name = entry[&apos;name&apos;].toString();
			var type = entry[&apos;type&apos;].toString();
			var size = entry[&apos;size&apos;].toString();
			var allow_null = entry[&apos;allow_null&apos;].toString();
			var default_value = entry[&apos;default_value&apos;];

			var column = &lt;columns name={name} type={type} size={size} allowNull={allow_null}&gt;&lt;/columns&gt;;

			if(default_value){
				column.@default_value = default_value;
			}
			columns += column;
		});
		table.columns = columns;
	}
	return table;
}</code>
    <type>FUNCTION</type>
    <scope>0</scope>
  </codeTemplate>
  <codeTemplate version="3.1.1">
    <id>63d7ca76-9a59-450e-87dc-e48fbcf87e42</id>
    <name>Retrieve Pregnancy Observation Forms</name>
    <tooltip>Retrieve Pregnancy Observations</tooltip>
    <code>function addPregnancyObs(visitId, dbConn) {
  var results = dbConn.executeCachedQuery(&quot;SELECT _URI, OPENHDS_VISIT_ID, EXPECTED_DELIVERY_DATE, OPENHDS_FIELD_WORKER_ID, OPENHDS_RECORDED_DATE, OPENHDS_INDIVIDUAL_ID FROM &quot; + globalMap.get(&quot;PREGNANCY_OBS_TABLE&quot;) + &quot; WHERE OPENHDS_VISIT_ID = &apos;&quot; + visitId + &quot;&apos; AND processed_by_mirth =0&quot;);
  var pregnancyObsForms = resultsToForms(results, &quot;&lt;pregnancyobs event=&apos;pregnancyobs&apos; table-name=&apos;&quot; + globalMap.get(&quot;PREGNANCY_OBS_TABLE&quot;) + &quot;&apos;/&gt;&quot;);
  return pregnancyObsForms;
}</code>
    <type>FUNCTION</type>
    <scope>0</scope>
  </codeTemplate>
  <codeTemplate version="3.1.1">
    <id>6758f0cc-1618-4c7a-b3fe-3d1ae4b40246</id>
    <name>Result Set to XML</name>
    <tooltip>Converts a java.sql.ResultSet to an XML representation. The XML will have elements named after the column names, and the values of those XML elements will be the column values</tooltip>
    <code>// rs - the ResultSet instance
// xmlElement - a string containing the document level xml element to use for the XML document
function resultSetToXml(rs, xmlElement) {
  var rsmd = rs.getMetaData();
  var result = new XML(xmlElement);

  for (var i = 1; i &lt;= rsmd.getColumnCount(); i++)  {
	var value = rs.getString(i);

    if (value === &quot;null&quot;) {
      value = null;
    }

    result[rsmd.getColumnName(i).toLowerCase()] = value;
  }

  return result;
}</code>
    <type>FUNCTION</type>
    <scope>0</scope>
  </codeTemplate>
  <codeTemplate version="3.1.1">
    <id>699d31d5-9c63-45b7-af5f-dcad0cc6be5b</id>
    <name>ExtraForm::getExtraFormData</name>
    <tooltip>Extracts ExtraForm Data from a given ExtraForm Table and returns a JS-Array containing objects (JS-Array) for each data entry, describing its colum entries</tooltip>
    <code>// modify function_name and parameters as you wish.
// one function per template is recommended. i.e.) create a new code template for each new function.
function getExtraFormData(tableName, rowsToFetch){
	var listOfObjects = [];
	var tableNameResult = null; 
	var sql = &quot;SELECT * FROM &quot; + tableName + &quot; WHERE PROCESSED_BY_MIRTH = 0 LIMIT &quot; + rowsToFetch;
	var connection;
	try{
		connection = DatabaseConnectionFactory.createConnection(&apos;com.mysql.jdbc.Driver&apos;,globalMap.get(&quot;ODK_DATABASE_URL&quot;), globalMap.get(&quot;ODK_DATABASE_USER&quot;),globalMap.get(&quot;ODK_DATABASE_PASSWORD&quot;));
		var rs;
		var stmt;
		try{
			stmt = connection.createStatement();
			rs = stmt.executeQuery(sql);
			var rsmd = rs.getMetaData(); //ResultSetMetaData

			while(rs.next()){ //ResultSet should contain at most rowsToFetch entries due to the LIMIT rowsToFetch in SELECT above
				var listOfColumns = [];
				for(var counter = 1; counter &lt;= rsmd.getColumnCount(); counter++ ){
					var columnName = rsmd.getColumnName(counter);
					var value = rs.getString(columnName);
					var columnTypeName = rsmd.getColumnTypeName(counter);

					var columnEntry = {
						&apos;columnName&apos; : columnName, 
						&apos;value&apos; : value,
						&apos;columnTypeName&apos; : columnTypeName
					}
					listOfColumns.push(columnEntry);
				}
				listOfObjects.push(listOfColumns);
		    }
		}
		catch(e){
		}
		finally{
			if(rs != null)
				rs.close();
			if(stmt != null)
				stmt.close();
		}
	}
	catch(e){
	}
	finally{
		if(connection != null)
			connection.close();
	}
	return listOfObjects;
}</code>
    <type>FUNCTION</type>
    <scope>0</scope>
  </codeTemplate>
  <codeTemplate version="3.1.1">
    <id>6e3b6567-ac0e-477f-91dc-d99979b47004</id>
    <name>Retrieve External In Migration Forms</name>
    <tooltip>Retrieve External In Migration Forms</tooltip>
    <code>function addExternalInmigrations(visitId, dbConn) {
  var results = dbConn.executeCachedQuery(&quot;SELECT _URI, REASON, INDIVIDUAL_INFO_DATE_OF_BIRTH, DATE_OF_MIGRATION, INDIVIDUAL_INFO_FIRST_NAME, INDIVIDUAL_INFO_MOTHER_ID, INDIVIDUAL_INFO_INDIVIDUAL_ID, MOVEDFROM, OPENHDS_VISIT_ID, INDIVIDUAL_INFO_GENDER, OPENHDS_LOCATION_ID, OPENHDS_FIELD_WORKER_ID, INDIVIDUAL_INFO_LAST_NAME, INDIVIDUAL_INFO_PARTIAL_DATE, INDIVIDUAL_INFO_FATHER_ID, INDIVIDUAL_INFO_MIDDLE_NAME FROM &quot; + globalMap.get(&quot;IN_MIGRATION_TABLE&quot;) + &quot; WHERE OPENHDS_VISIT_ID = &apos;&quot; + visitId + &quot;&apos; AND openhds_migration_type = &apos;EXTERNAL_INMIGRATION&apos; AND processed_by_mirth=0 order by INDIVIDUAL_INFO_DATE_OF_BIRTH ASC&quot;);
  var inMigrationForms = resultsToForms(results, &quot;&lt;inmigration event=&apos;external-inmigration&apos; table-name=&apos;&quot; + globalMap.get(&quot;IN_MIGRATION_TABLE&quot;) + &quot;&apos;/&gt;&quot;);
  return inMigrationForms;
}</code>
    <type>FUNCTION</type>
    <scope>0</scope>
  </codeTemplate>
  <codeTemplate version="3.1.1">
    <id>a6998047-e6e2-4dd6-bc24-0a0edc20b8bb</id>
    <name>Mark Data Migration Record as processed</name>
    <tooltip></tooltip>
    <code>function markRecordAsProcessedMigration(rawData, status) {
  var originalXml = new XML(rawData);
  // retrieve the table to update
  var tableName = originalXml[&quot;@table-name&quot;].toString();
  var id = originalXml[&quot;id&quot;].toString();

 var dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;com.mysql.jdbc.Driver&apos;, globalMap.get(&quot;HRS_DATABASE_URL&quot;), globalMap.get(&quot;HRS_DATABASE_USER&quot;), globalMap.get(&quot;HRS_DATABASE_PASSWORD&quot;));
  var result = dbConn.executeUpdate(&quot;UPDATE &quot; + tableName + &quot; SET processed_by_mirth = &quot; + status + &quot; WHERE id = &apos;&quot; + id + &quot;&apos;&quot;);
  dbConn.close();
}</code>
    <type>FUNCTION</type>
    <scope>0</scope>
  </codeTemplate>
  <codeTemplate version="3.1.1">
    <id>b3441bd0-63cd-4bd4-96d1-bf98d21a4cdd</id>
    <name>Mark Record as processed</name>
    <tooltip></tooltip>
    <code>function markRecordAsProcessed(rawData, status) {
  var originalXml = new XML(rawData);
  // retrieve the table to update
  var tableName = originalXml[&quot;@table-name&quot;].toString();
  var uri = originalXml[&quot;_uri&quot;].toString();


if (tableName == globalMap.get(&quot;VISIT_TABLE&quot;) ) {
	var dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;com.mysql.jdbc.Driver&apos;, globalMap.get(&quot;ODK_DATABASE_URL&quot;), globalMap.get(&quot;ODK_DATABASE_USER&quot;), globalMap.get(&quot;ODK_DATABASE_PASSWORD&quot;));
    var result = dbConn.executeUpdate(&quot;UPDATE &quot; + tableName + &quot; SET processed_by_mirth = &quot; + status + &quot; WHERE OPENHDS_VISIT_ID = &apos;&quot; + originalXml[&quot;openhds_visit_id&quot;].toString() + &quot;&apos;&quot;);
    dbConn.close();
} else if (tableName !== &quot;OMGIM&quot;) {
 var dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;com.mysql.jdbc.Driver&apos;, globalMap.get(&quot;ODK_DATABASE_URL&quot;), globalMap.get(&quot;ODK_DATABASE_USER&quot;), globalMap.get(&quot;ODK_DATABASE_PASSWORD&quot;));
  var result = dbConn.executeUpdate(&quot;UPDATE &quot; + tableName + &quot; SET processed_by_mirth = &quot; + status + &quot; WHERE _URI = &apos;&quot; + uri + &quot;&apos;&quot;);
  dbConn.close();
  } 
}</code>
    <type>FUNCTION</type>
    <scope>0</scope>
  </codeTemplate>
  <codeTemplate version="3.1.1">
    <id>c9ab01f4-38e6-471d-a294-c615cf2f63c7</id>
    <name>Retrieve Internal In Migration Forms</name>
    <tooltip>Retrieve Internal In Migration Forms</tooltip>
    <code>function addInternalInmigrations(visitId, dbConn) {
  var results = dbConn.executeCachedQuery(&quot;SELECT _URI, REASON, DATE_OF_MIGRATION, INDIVIDUAL_INFO_INDIVIDUAL_ID, ORIGIN, OPENHDS_VISIT_ID, OPENHDS_LOCATION_ID, OPENHDS_FIELD_WORKER_ID FROM &quot; + globalMap.get(&quot;IN_MIGRATION_TABLE&quot;) + &quot; WHERE OPENHDS_VISIT_ID = &apos;&quot; + visitId + &quot;&apos; AND openhds_migration_type = &apos;INTERNAL_INMIGRATION&apos; AND processed_by_mirth=0&quot;);
  var inMigrationForms = resultsToForms(results, &quot;&lt;inmigration event=&apos;internal-inmigration&apos; table-name=&apos;&quot; + globalMap.get(&quot;IN_MIGRATION_TABLE&quot;) + &quot;&apos;/&gt;&quot;);
  return inMigrationForms;
}</code>
    <type>FUNCTION</type>
    <scope>0</scope>
  </codeTemplate>
  <codeTemplate version="3.1.1">
    <id>cce2bb0e-524e-4a9d-9a66-9cf21efad667</id>
    <name>ExtraForm::getPrimaryKeyList</name>
    <tooltip>Get the Primary Keys for a given Extra Form Core Table as a Javascript String Array</tooltip>
    <code>// modify function_name and parameters as you wish.
// one function per template is recommended. i.e.) create a new code template for each new function.
function getPrimaryKeyList(CORE_TABLE_NAME) {
	var connection;
	var primaryKeyList = [];
	try {
		connection = DatabaseConnectionFactory.createConnection(&apos;com.mysql.jdbc.Driver&apos;,globalMap.get(&quot;ODK_DATABASE_URL&quot;), globalMap.get(&quot;ODK_DATABASE_USER&quot;),globalMap.get(&quot;ODK_DATABASE_PASSWORD&quot;));
		var metaData = connection.getMetaData();	
	
		var result;
		try { 
			var result = metaData.getPrimaryKeys(null, null, CORE_TABLE_NAME);
			var counter = 0;
			while (result.next()) {		
				var primaryKey = result.getString(&quot;COLUMN_NAME&quot;);
				primaryKeyList.push(primaryKey);
				counter++;
			}
		}
		finally {
			if(result){
				result.close();
			}
	}
	} finally {
		if (connection) { 
			connection.close();
		}
	}
	return primaryKeyList;
}</code>
    <type>FUNCTION</type>
    <scope>0</scope>
  </codeTemplate>
  <codeTemplate version="3.1.1">
    <id>f13b33f5-99ae-45c3-9d6e-b5cfad640b39</id>
    <name>Retrieve Death Forms</name>
    <tooltip>Retrieve Death Forms</tooltip>
    <code>function addDeaths(visitId, dbConn) {
  var results = dbConn.executeCachedQuery(&quot;SELECT _URI, OPENHDS_VISIT_ID, CAUSE_OF_DEATH, OPENHDS_FIELD_WORKER_ID, DATE_OF_DEATH, PLACE_OF_DEATH, OPENHDS_INDIVIDUAL_ID FROM &quot; + globalMap.get(&quot;DEATH_TABLE&quot;) + &quot; WHERE OPENHDS_VISIT_ID = &apos;&quot; + visitId + &quot;&apos; AND processed_by_mirth =0&quot;);
  var deathForms = resultsToForms(results, &quot;&lt;death event=&apos;death&apos; table-name=&apos;&quot; + globalMap.get(&quot;DEATH_TABLE&quot;) + &quot;&apos;/&gt;&quot;);
  return deathForms;
}</code>
    <type>FUNCTION</type>
    <scope>0</scope>
  </codeTemplate>
</list>